import{_ as n,o as s,c as a,e as t}from"./app-CkeFUswH.js";const o="/tgx-blog/assets/eventloop-BWUu1vNf.png",e="/tgx-blog/assets/macrotask-microtask-DP0xzl2p.png",i="/tgx-blog/assets/example1-Cw_TUfKz.png",l={},p=t(`<h1 id="eventloop-事件循环机制" tabindex="-1"><a class="header-anchor" href="#eventloop-事件循环机制"><span>EventLoop 事件循环机制</span></a></h1><div class="custom-container tip"><p class="custom-container-title">说明</p><ul><li>JavaScript 是一门单线程执行的编程语言，同一时间只能做一件事情。</li><li>如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。</li><li>为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了 <strong>同步任务</strong> 和 <strong>异步任务</strong> 两类</li></ul></div><h2 id="_1-同步任务" tabindex="-1"><a class="header-anchor" href="#_1-同步任务"><span>1. 同步任务</span></a></h2><div class="custom-container tip"><p class="custom-container-title">概念</p><ul><li>又叫做<strong>非耗时任务</strong>，指的是在 <strong>主线程上排队执行</strong> 的那些任务</li><li>只有前一个任务执行完毕，才能执行后一个任务</li></ul></div><h2 id="_2-异步任务" tabindex="-1"><a class="header-anchor" href="#_2-异步任务"><span>2. 异步任务</span></a></h2><div class="custom-container tip"><p class="custom-container-title">概念</p><ul><li>异步任务又分为 <strong>宏任务</strong> 和 <strong>微任务</strong><ul><li>宏任务：异步 Ajax 请求 、setTimeout、setInterval、文件操作 、 其它宏任务</li><li>微任务：Promise.then、.catch 和 .finally 、 process.nextTick 、 其它微任务</li></ul></li></ul></div><ul><li>异步任务又叫 <strong>耗时任务</strong>，异步任务由 JavaScript 委托给 <strong>宿主环境</strong> 进行执行</li><li><strong>宿主环境</strong> 通常有： node 、浏览器 <ul><li>例如：<strong>委托 node</strong> 执行异步文件读取任务</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;路径&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> cbA<span class="token punctuation">)</span> <span class="token comment">// JavaScript 主线程 只负责执行回调函数 cbA</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>例如：<strong>委托浏览器</strong> 执行异步定时器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>cbC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// JavaScript 主线程 只负责执行回调函数 cbC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>当异步任务执行完成后，会通知 JavaScript 主线程 执行 <strong>异步任务的回调函数</strong></li></ul><h2 id="_3-同步任务-和-异步任务-的执行过程" tabindex="-1"><a class="header-anchor" href="#_3-同步任务-和-异步任务-的执行过程"><span>3. 同步任务 和 异步任务 的执行过程</span></a></h2><div class="custom-container tip"><p class="custom-container-title">重要</p><ul><li>JavaScript 主线程 <strong>只负责</strong> 执行 <strong>同步任务</strong> 和 <strong>回调函数</strong></li><li>异步任务由 <strong>宿主环境</strong> 执行</li></ul></div><p><img src="`+o+'" alt="同步任务和异步任务的执行过程" title="同步任务和异步任务的执行过程" width="740"></p><ul><li>执行过程如下 <ol><li>同步任务由 <strong>JavaScript 主线程</strong> 次序执行</li><li>异步任务委托给 <strong>宿主环境</strong> 执行</li><li>已完成的 <strong>异步任务对应的回调函数</strong>，会被加入到任务队列中等待执行</li><li><strong>JavaScript 主线程</strong> 的执行栈被清空后，会读取任务队列中的 <strong>回调函数</strong>，次序执行</li><li><strong>JavaScript 主线程不断重复上面的第 4 步</strong> （因此叫事件循环 EventLoop）</li></ol></li></ul><h2 id="_4-宏任务-和-微任务-的执行顺序" tabindex="-1"><a class="header-anchor" href="#_4-宏任务-和-微任务-的执行顺序"><span>4. 宏任务 和 微任务 的执行顺序</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p><strong>宏任务</strong> 和 <strong>微任务</strong> 是交替执行的。待执行的微任务被清空后才会执行下一个宏任务</p></div><p><img src="'+e+'" alt="宏任务 和 微任务 的执行顺序" title="宏任务 和 微任务 的执行顺序" width="740" height="300"></p><h2 id="_5-案例分析" tabindex="-1"><a class="header-anchor" href="#_5-案例分析"><span>5. 案例分析</span></a></h2><h3 id="_1-案例一" tabindex="-1"><a class="header-anchor" href="#_1-案例一"><span>1. 案例一</span></a></h3><div class="custom-container tip"><p class="custom-container-title">分析</p><ul><li>首先遇到宏任务 setTimeout， 那它里面的回调函数将被搁置</li><li>接着遇到同步任务 new Promise，那它里面的回调函数将会立即执行，<strong>输出 2</strong></li><li>接着遇到微任务 .then()，那它里面的回调函数将会被搁置</li><li>最后遇到同步任务，直接 <strong>输出 4</strong></li><li>此时 JS 检查到任务列队中有一个待执行的微任务 .then()，就会执行它的回调函数，<strong>输出 3</strong></li><li>最后清空了待执行的微任务后，就执行下一个宏任务 setTimeout 里面的回调函数，<strong>输出 1</strong></li><li>所有任务清空完毕</li></ul></div><img src="'+i+`" alt="案例分析" title="案例分析" width="740"><h3 id="_2-案例二" tabindex="-1"><a class="header-anchor" href="#_2-案例二"><span>2. 案例二</span></a></h3><div class="custom-container tip"><p class="custom-container-title">输出分析</p><ol><li><strong>第 1 行</strong> 遇到同步任务，<strong>输出 1</strong></li><li><strong>第 3 行</strong> 遇到第 1 个宏任务 setTimeout，它的回调函数会被搁置</li><li><strong>第 13-15 行</strong> 遇到同步任务 new Promise 它的回调函数会立即执行，<strong>输出 5</strong></li><li><strong>第 16 行</strong> 遇到第 1 个微任务 .then()，它的回调函数会被搁置</li><li><strong>第 20 行</strong> 遇到第 2 个宏任务 setTimeout，它的回调函数会被搁置</li><li>到此为止，同步任务已被清空</li><li><strong>第 16-18 行</strong> 开始检查待执行的微任务，则执行它的回调函数，<strong>输出 6</strong></li><li>到此为止，第一轮待执行的微任务已被清空</li><li><strong>第 3-4 行</strong> 开始执行第 1 个宏任务 setTimeout 中的回调函数，<strong>输出 2</strong></li><li><strong>第 5-7 行</strong> 继续遇到同步任务 new Promise，则立即执行它的回调函数，<strong>输出 3</strong></li><li><strong>第 8-9 行</strong> 发现 new Promise 后面还有一个 .then() 微任务，则继续执行它的回调函数，<strong>输出 4</strong></li><li>到此为止，第 1 个宏任务 setTimeout 已执行完成</li><li><strong>第 20-21 行</strong> 开始执行第 2 个宏任务 setTimeout 中的回调函数，<strong>输出 7</strong></li><li><strong>第 22-24 行</strong> 继续遇到同步任务 new Promise，则立即执行它的回调函数，<strong>输出 8</strong></li><li><strong>第 25-26 行</strong>发现 new Promise 后面还有一个 .then() 微任务，则继续执行它的回调函数，<strong>输出 9</strong></li><li>所有任务清空完毕</li></ol></div><details class="custom-container details"><summary>点击查看 案例二</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5&#39;</span><span class="token punctuation">)</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;7&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;8&#39;</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 输出结果 1 5 6 2 3 4 7 8 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,21),c=[p];function u(r,d){return s(),a("div",null,c)}const g=n(l,[["render",u],["__file","event-loop.html.vue"]]),v=JSON.parse('{"path":"/frontend/javascript/event-loop.html","title":"EventLoop 事件循环机制","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 同步任务","slug":"_1-同步任务","link":"#_1-同步任务","children":[]},{"level":2,"title":"2. 异步任务","slug":"_2-异步任务","link":"#_2-异步任务","children":[]},{"level":2,"title":"3. 同步任务 和 异步任务 的执行过程","slug":"_3-同步任务-和-异步任务-的执行过程","link":"#_3-同步任务-和-异步任务-的执行过程","children":[]},{"level":2,"title":"4. 宏任务 和 微任务 的执行顺序","slug":"_4-宏任务-和-微任务-的执行顺序","link":"#_4-宏任务-和-微任务-的执行顺序","children":[]},{"level":2,"title":"5. 案例分析","slug":"_5-案例分析","link":"#_5-案例分析","children":[{"level":3,"title":"1. 案例一","slug":"_1-案例一","link":"#_1-案例一","children":[]},{"level":3,"title":"2. 案例二","slug":"_2-案例二","link":"#_2-案例二","children":[]}]}],"git":{"updatedTime":1660817193000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":4}]},"filePathRelative":"frontend/javascript/event-loop.md"}');export{g as comp,v as data};
