import{_ as n,o as s,c as a,e as t}from"./app-CkeFUswH.js";const e={},p=t(`<h1 id="async-await-相关知识" tabindex="-1"><a class="header-anchor" href="#async-await-相关知识"><span>Async / Await 相关知识</span></a></h1><h2 id="_1-async-await-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-async-await-有什么用"><span>1. async/await 有什么用</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>async/await 是 ES8（ECMAScript 2017）引入的新语法，用来简化 Promise 异步操作。 在 async/await 出现之前，开发者只能通过链式 .then() 的方式处理 Promise 异步操作</p></div><ul><li>then() 链式调用的优缺点 <ul><li>优点：解决了回调地狱的问题</li><li>缺点：代码可阅读性差、不易理解</li></ul></li><li>async/await 的好处 <ul><li>可以解决异步编程的回调地狱问题</li><li>使得异步代码看起来像同步代码一样直观</li></ul></li></ul><h2 id="_2-async-await-语法特性" tabindex="-1"><a class="header-anchor" href="#_2-async-await-语法特性"><span>2. async/await 语法特性</span></a></h2><div class="custom-container tip"><p class="custom-container-title">注意事项</p><ul><li>async/await 是一起出现的。一个 Promise 实例如果被 await 修饰，那它外层的这个函数就要被 async 修饰成异步函数</li><li>在 async 方法中，<strong>第一个 await 之前的代码会同步执行</strong>，await 之后的代码会异步执行</li></ul></div><details class="custom-container details"><summary>点击查看 async/await 语法 案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义 3 个返回 Promise 实例对象的变量</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> p1
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token comment">// 输出 p1 的返回结果</span>

    <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> p2
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span> <span class="token comment">// 输出 p2 的返回结果</span>

    <span class="token keyword">const</span> res3 <span class="token operator">=</span> <span class="token keyword">await</span> p3
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span> <span class="token comment">// 输出 p3 的返回结果</span>
<span class="token punctuation">}</span>

<span class="token function">getRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 会从上往下依次得到 p1 p2 p3 的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>点击查看 async/await 同步执行的顺序 案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 1.同步代码 A</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 2.第一个 await 之前的仍然视为同步代码 B</span>

  <span class="token comment">// 遇到 await 就推进任务列队，去执行外面的同步代码 C</span>
  <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./def.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 4.同步代码执行完毕，来到异步任务 D</span>
  <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./def.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 5.继续异步任务 E</span>
  <span class="token keyword">const</span> res3 <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./def.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 6.继续异步任务 F</span>
<span class="token punctuation">}</span>

<span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 3.同步代码 C</span>

<span class="token comment">// 结果为</span>
<span class="token comment">// A</span>
<span class="token comment">// B</span>
<span class="token comment">// C</span>
<span class="token comment">// D</span>
<span class="token comment">// E</span>
<span class="token comment">// F</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,8),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","async-await.html.vue"]]),k=JSON.parse('{"path":"/frontend/javascript/async-await.html","title":"Async / Await 相关知识","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. async/await 有什么用","slug":"_1-async-await-有什么用","link":"#_1-async-await-有什么用","children":[]},{"level":2,"title":"2. async/await 语法特性","slug":"_2-async-await-语法特性","link":"#_2-async-await-语法特性","children":[]}],"git":{"updatedTime":1658804855000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":2}]},"filePathRelative":"frontend/javascript/async-await.md"}');export{r as comp,k as data};
