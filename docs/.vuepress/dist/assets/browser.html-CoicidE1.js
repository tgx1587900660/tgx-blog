import{_ as t,o as s,c as a,e as i}from"./app-CkeFUswH.js";const e="/tgx-blog/assets/browser-principle-Dt7oAeIk.png",r="/tgx-blog/assets/browser-dom-bom-lO6-C4pc.png",l="/tgx-blog/assets/environment-DINcECyg.png",n={},c=i('<h1 id="浏览器-与-javascript-的关系" tabindex="-1"><a class="header-anchor" href="#浏览器-与-javascript-的关系"><span>浏览器 与 JavaScript 的关系</span></a></h1><div class="custom-container tip"><p class="custom-container-title">栏目说明</p><p>本栏目探索了 web 浏览器 和 JavaScript 之间联系</p></div><h2 id="_1-浏览器为什么能运行-javascript" tabindex="-1"><a class="header-anchor" href="#_1-浏览器为什么能运行-javascript"><span>1. 浏览器为什么能运行 JavaScript ?</span></a></h2><div class="custom-container tip"><p class="custom-container-title">一句话总结</p><p>浏览器之所以能运行 JS 代码，是因为它内置了 <strong>JavaScript 解析引擎</strong>。</p></div><ul><li>浏览器是 JS 的 <strong>宿主环境</strong> 之一。js 代码在浏览器被加载之后，本质上只是一些字符串。浏览器利用了 <strong>JavaScript 解析引擎</strong> 来解析这些字符串，从而实现运行 js 代码的功能</li><li>每个浏览器都有自己的 JavaScript 解析引擎 ，目前，<strong>性能最好的解析引擎是 V8</strong></li></ul><p><img src="'+e+'" alt="浏览器为什么能运行 JavaScript示意图" title="浏览器为什么能运行 JavaScript示意图"></p><h2 id="_2-js-为什么能操作-dom-和-bom" tabindex="-1"><a class="header-anchor" href="#_2-js-为什么能操作-dom-和-bom"><span>2. JS 为什么能操作 DOM 和 BOM ?</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>因为浏览器内置了一些操作 DOM、 BOM 和 Ajax 的 api 接口，所以我们就可以基于这些 api 编写一些 <strong>操作 DOM、BOM、Ajax 的 js 代码</strong>。浏览器拿到这些代码后，就交给 js 解析引擎处理，从而实现 js 代码操作 DOM，BOM 和 Ajax 的功能。</p></div><p><img src="'+r+'" alt="JS 为什么能操作 DOM 和 BOM示意图" title="JS 为什么能操作 DOM 和 BOM示意图"></p><h2 id="_3-浏览器中的-js-运行环境" tabindex="-1"><a class="header-anchor" href="#_3-浏览器中的-js-运行环境"><span>3. 浏览器中的 JS 运行环境</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><ul><li>运行环境：是指代码正常运行所需的必要环境</li><li>就像种子发芽的必要环境是：适宜的温度、氧气、水一样，js 代码运行也需要特定的环境</li></ul></div><ul><li>对于 Chrome 浏览器来说，js 代码运行的两个条件： <ul><li>V8 解析引擎</li><li>内置 API</li></ul></li></ul><img src="'+l+'" alt="JS 运行环境示意图" title="JS 运行环境示意图"><h2 id="_4-浏览器的调试工具" tabindex="-1"><a class="header-anchor" href="#_4-浏览器的调试工具"><span>4. 浏览器的调试工具</span></a></h2><h3 id="_1-断点调试" tabindex="-1"><a class="header-anchor" href="#_1-断点调试"><span>1. 断点调试</span></a></h3><ul><li>单步跳过 F10：会让代码从上往下，逐行执行，<strong>遇到函数调用，也直接跳到下一个语句</strong></li><li>单步调试 F11：会让代码从上往下，逐行执行，<strong>遇到函数调用，会进入函数体内部</strong></li><li>单步跳出 shift + F11：会跳出当前函数（函数执行完成），接着执行函数调用以后的代码</li></ul>',16),o=[c];function p(d,h){return s(),a("div",null,o)}const _=t(n,[["render",p],["__file","browser.html.vue"]]),g=JSON.parse('{"path":"/frontend/source/article/browser.html","title":"浏览器 与 JavaScript 的关系","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 浏览器为什么能运行 JavaScript ?","slug":"_1-浏览器为什么能运行-javascript","link":"#_1-浏览器为什么能运行-javascript","children":[]},{"level":2,"title":"2. JS 为什么能操作 DOM 和 BOM ?","slug":"_2-js-为什么能操作-dom-和-bom","link":"#_2-js-为什么能操作-dom-和-bom","children":[]},{"level":2,"title":"3. 浏览器中的 JS 运行环境","slug":"_3-浏览器中的-js-运行环境","link":"#_3-浏览器中的-js-运行环境","children":[]},{"level":2,"title":"4. 浏览器的调试工具","slug":"_4-浏览器的调试工具","link":"#_4-浏览器的调试工具","children":[{"level":3,"title":"1. 断点调试","slug":"_1-断点调试","link":"#_1-断点调试","children":[]}]}],"git":{"updatedTime":1681876227000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":1}]},"filePathRelative":"frontend/source/article/browser.md"}');export{_ as comp,g as data};
