import{_ as n,o as s,c as a,e}from"./app-CkeFUswH.js";const l={},t=e(`<h1 id="vue-源码学习" tabindex="-1"><a class="header-anchor" href="#vue-源码学习"><span>Vue 源码学习</span></a></h1><div class="custom-container tip"><p class="custom-container-title">栏目说明</p><p>本栏目收集了部分 vue 2.6 的源码学习内容</p></div><ul><li>学习路线 <ul><li><ol><li>变化侦测：怎么样实现数据响应式的？</li></ol></li><li><ol start="2"><li>虚拟 DOM： 为什么有虚拟 DOM？怎么样进行 DOM-Diff 节点对比？</li></ol></li><li><ol start="3"><li>模版解析：怎么样把 <code>template</code> 标签中的字符串一步步解析成 DOM?</li></ol></li><li><ol start="4"><li>生命周期：一个组件从创建到销毁经历了什么？</li></ol></li><li><ol start="5"><li>实例方法：为什么有 this.$set() this.$delete()... 这些方法？</li></ol></li></ul></li></ul><h2 id="_1-变化侦测" tabindex="-1"><a class="header-anchor" href="#_1-变化侦测"><span>1. 变化侦测</span></a></h2><div class="custom-container tip"><p class="custom-container-title">概要</p><p>本小节大致学习 Vue 是如何实现 <code>Object</code> 和 <code>Array</code> 数据的响应式监听的</p></div><h3 id="_1-对象劫持" tabindex="-1"><a class="header-anchor" href="#_1-对象劫持"><span>1. 对象劫持</span></a></h3><ul><li><p>对象的访问情况，可以通过 Object.defineProperty 方法的 getter 捕获</p></li><li><p>对象的变化情况，可以通过 Object.defineProperty 方法的 setter 捕获</p></li><li><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></li><li><p>Vue 封装了一个 <code>Observer 类</code> 来让某个数据变得 “可观测”，内部用到了 Object.defineProperty() 方法</p><ul><li>不足：直接给对象添加/删除属性，则这个属性无法变成 <code>可观测</code></li></ul></li><li><p>Vue 封装了一个 <code>Dep 类</code> 来收集某个 <code>依赖</code> 对应的 <code>依赖者</code></p><ul><li>依赖 可以看成是 数据</li><li>依赖者 可以看成是 组件</li></ul></li></ul><h3 id="_2-数组劫持" tabindex="-1"><a class="header-anchor" href="#_2-数组劫持"><span>2. 数组劫持</span></a></h3><ul><li>数组的访问情况，也可以通过 getter 捕获</li><li>数组的变化情况，需要通过拦截实现。原理是：拦截原数组原型上的方法 <ul><li>不足：直接用下标和 length 变更的数组元素，无法捕获</li></ul></li><li>Vue 重写了数组 7 个方法 push, unshift, pop, shift, splice, sort, reverse，在内部调用了原方法<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 大致像这样，既不改变 push 方法，又可以通知变化</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">newPush</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr 被修改了，请通知依赖者&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">.</span><span class="token function">newPush</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_2-虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_2-虚拟-dom"><span>2. 虚拟 DOM</span></a></h2><h3 id="_1-什么是-虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_1-什么是-虚拟-dom"><span>1. 什么是 虚拟 DOM？</span></a></h3><ul><li>虚拟 DOM 就是一个 js 对象，里面包含一个又一个属性，用来描述真正的 DOM 节点</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;content&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;navbar&quot;</span><span class="token operator">&gt;</span>导航条<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>          <span class="token comment">// 元素标签名</span>
  <span class="token literal-property property">attrs</span><span class="token operator">:</span><span class="token punctuation">{</span>             <span class="token comment">// 属性</span>
    <span class="token keyword">class</span><span class="token operator">:</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 类名</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;navbar&#39;</span>       <span class="token comment">// id 号</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token string">&#39;导航条&#39;</span><span class="token punctuation">,</span>      <span class="token comment">// 标签包裹的文本内容</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment">// 子元素</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-为什么要有-虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_2-为什么要有-虚拟-dom"><span>2. 为什么要有 虚拟 DOM？</span></a></h3><ul><li>目的是为了让 <strong>js 的计算性能</strong> 来换取 <strong>dom 的操作性能</strong>（减少回流和重绘）</li><li>当数据变化时，利用 虚拟 DOM 进行对比，找出变化的地方，用最少次数来更新真实的网页 DOM</li><li>对比 DOM 变化的过程就是 <code>DOM-Diff</code> 算法的过程</li></ul><h3 id="_3-dom-diff-算法-具体做了什么" tabindex="-1"><a class="header-anchor" href="#_3-dom-diff-算法-具体做了什么"><span>3. <code>DOM-Diff</code> 算法 具体做了什么？</span></a></h3><ul><li><code>DOM-Diff</code> 算法 主要做 3 件事： <ul><li><ol><li>以 新 DOM 为基准，如果 旧 DOM 没有，新 DOM 有，则添加节点</li></ol></li><li><ol start="2"><li>以 新 DOM 为基准，如果 旧 DOM 有，新 DOM 没有，则删除节点</li></ol></li><li><ol start="3"><li>以 新 DOM 为基准，如果 旧 DOM 和新 DOM 都有，则更新节点。更新节点又分 3 种情况：</li></ol><ul><li>3.1 静态节点。无需变化</li><li>3.2 文本节点。对比文本内容，进行更新</li><li>3.3 元素节点。元素节点又分 2 种： <ul><li>不包含子节点。直接清空</li><li>包含子节点。进行详细对比（相当于对比两个数组，挑了 4 种特殊情况，最后再进行双重 for 循环一一对比）</li></ul></li></ul></li></ul></li></ul><h2 id="_3-模版解析" tabindex="-1"><a class="header-anchor" href="#_3-模版解析"><span>3. 模版解析</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><ul><li>AST（AbstractSyntaxTree） 是抽象语法树，可以利用 js 对象来描述一个 html 节点（DOM 节点）</li><li>解析模版，就是利用正则表达式来匹配 template 中的字符串，解析出 html 、文本、过滤器这些内容，转化为 AST</li></ul></div><h3 id="_1-解析阶段" tabindex="-1"><a class="header-anchor" href="#_1-解析阶段"><span>1. 解析阶段</span></a></h3><ul><li><p>解析模版字符串过程中会在对应的时机，调用对应的解析器和钩子函数，将<code>模板字符串</code>转化成 <code>AST</code></p><ul><li><ol><li>调用 parse 函数解析模版字符串</li></ol></li><li><ol start="2"><li>parse 函数包含 3 部分：html 解析器、文本解析器、过滤器解析器</li></ol></li><li><ol start="3"><li>在 html 解析器中进行解析，遇到文本就调用文本解析器，遇到过滤器就调用过滤器解析器</li></ol></li></ul></li><li><p>HTML 解析器</p><ul><li>通过一系列正则表达式来匹配对应的内容，调用对应的钩子函数</li><li>内部维护一个 stack 栈，来确保<code>AST节点层级</code>与<code>真正DOM层级</code>一致。</li></ul></li><li><p>文本 解析器</p><ul><li>二次处理<code>HTML 解析器</code>解析出来的文本及其变量，并构造 render 函数需要的数据结构</li></ul></li></ul><h3 id="_2-优化阶段" tabindex="-1"><a class="header-anchor" href="#_2-优化阶段"><span>2. 优化阶段</span></a></h3><ul><li>为 <strong>静态节点</strong> 打上标记，提升 虚拟 DOM 中 更新过程的性能</li><li>找出 <strong>静态节点</strong> 和 <strong>静态根节点</strong></li></ul><h3 id="_3-代码生成阶段" tabindex="-1"><a class="header-anchor" href="#_3-代码生成阶段"><span>3. 代码生成阶段</span></a></h3><ul><li>该阶段会生成一个 render 函数的字符串给 render 函数使用</li><li>render 函数是可选的，可以由用户自定义，也可以让 Vue 自己生成，取决于我们写代码时有没有传入</li><li>调用的这个 <code>render 函数</code>就可以得到 <code>AST 对应的虚拟 DOM 的 VNode</code></li></ul><h2 id="_4-生命周期" tabindex="-1"><a class="header-anchor" href="#_4-生命周期"><span>4. 生命周期</span></a></h2><h3 id="_1-初始化阶段" tabindex="-1"><a class="header-anchor" href="#_1-初始化阶段"><span>1. 初始化阶段</span></a></h3><ul><li>执行了 <code>new Vue</code> 创建了一个 Vue 实例对象，并在内部合并配置，初始化一些函数，顺序如下：<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化生命周期</span>
<span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化事件</span>
<span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化渲染</span>
<span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeCreate&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 调用生命周期钩子函数</span>
<span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化 injections</span>
<span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化 props, methods, data, computed, watch</span>
<span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化 provide</span>
<span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 调用生命周期钩子函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-模版编译阶段" tabindex="-1"><a class="header-anchor" href="#_2-模版编译阶段"><span>2. 模版编译阶段</span></a></h3><ul><li>该阶段就是把 template 模版字符串编译成 render 函数供 Vue 执行（工程化项目中，该阶段可以借助插件 vue-loader 实现）</li><li>然后调用 $mount 方法，准备挂载 DOM 元素</li></ul><h3 id="_3-挂载更新阶段" tabindex="-1"><a class="header-anchor" href="#_3-挂载更新阶段"><span>3. 挂载更新阶段</span></a></h3><ul><li>该阶段主要 获取 el 属性对应的 id 节点，并用 App 组件来替换，对其内容进行控制</li></ul><h3 id="_4-销毁阶段" tabindex="-1"><a class="header-anchor" href="#_4-销毁阶段"><span>4. 销毁阶段</span></a></h3><ul><li>该阶段主要将当前的 Vue 实例从其父级实例中删除，取消当前实例上的所有依赖追踪并且移除实例上的所有事件监听器</li></ul><h2 id="_5-实例方法" tabindex="-1"><a class="header-anchor" href="#_5-实例方法"><span>5. 实例方法</span></a></h2><h3 id="_1-set" tabindex="-1"><a class="header-anchor" href="#_1-set"><span>1. $set()</span></a></h3><ul><li>这个方法是用来结局以下两个问题： <ul><li>Vue 无法响应式监测对象通过 key/value 形式新增的属性</li><li>Vue 无法响应式监测数组通过下标来就该值和长度</li></ul></li></ul><h3 id="_2-delete" tabindex="-1"><a class="header-anchor" href="#_2-delete"><span>2. $delete()</span></a></h3><ul><li>这个方法是用来结局以下问题： <ul><li>Vue 无法响应式监测对象通过 delete 关键字来删除的某个属性</li></ul></li></ul><h3 id="_3-on-emit-off-once" tabindex="-1"><a class="header-anchor" href="#_3-on-emit-off-once"><span>3. $on(), $emit(), $off(), $once()</span></a></h3><ul><li>$on() 和 $emit() 是通过发布订阅模式，创建一个 <strong>事件中心</strong> 来建立联系的 <ul><li>$on() 用于订阅某个事件</li><li>$emit() 用于触发某个事件</li></ul></li><li>$off() 用来清除 <strong>事件中心</strong> 当中的事件</li><li>$once() 利用子函数来让某个函数执行一次就销毁（内部使用了 $off() 解绑事件 ）</li></ul><h3 id="_4-nexttick" tabindex="-1"><a class="header-anchor" href="#_4-nexttick"><span>4. $nextTick()</span></a></h3><ul><li>$nextTick()用于异步更新内容，因为 Vue 的 DOM 更新是异步的</li><li>当我们需要让 DOM 更新后才操作某些事情，就要使用该函数</li></ul>`,43),i=[t];function o(p,c){return s(),a("div",null,i)}const u=n(l,[["render",o],["__file","vue-source.html.vue"]]),d=JSON.parse('{"path":"/frontend/vue/vue2/vue-source.html","title":"Vue 源码学习","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 变化侦测","slug":"_1-变化侦测","link":"#_1-变化侦测","children":[{"level":3,"title":"1. 对象劫持","slug":"_1-对象劫持","link":"#_1-对象劫持","children":[]},{"level":3,"title":"2. 数组劫持","slug":"_2-数组劫持","link":"#_2-数组劫持","children":[]}]},{"level":2,"title":"2. 虚拟 DOM","slug":"_2-虚拟-dom","link":"#_2-虚拟-dom","children":[{"level":3,"title":"1. 什么是 虚拟 DOM？","slug":"_1-什么是-虚拟-dom","link":"#_1-什么是-虚拟-dom","children":[]},{"level":3,"title":"2. 为什么要有 虚拟 DOM？","slug":"_2-为什么要有-虚拟-dom","link":"#_2-为什么要有-虚拟-dom","children":[]},{"level":3,"title":"3. DOM-Diff 算法 具体做了什么？","slug":"_3-dom-diff-算法-具体做了什么","link":"#_3-dom-diff-算法-具体做了什么","children":[]}]},{"level":2,"title":"3. 模版解析","slug":"_3-模版解析","link":"#_3-模版解析","children":[{"level":3,"title":"1. 解析阶段","slug":"_1-解析阶段","link":"#_1-解析阶段","children":[]},{"level":3,"title":"2. 优化阶段","slug":"_2-优化阶段","link":"#_2-优化阶段","children":[]},{"level":3,"title":"3. 代码生成阶段","slug":"_3-代码生成阶段","link":"#_3-代码生成阶段","children":[]}]},{"level":2,"title":"4. 生命周期","slug":"_4-生命周期","link":"#_4-生命周期","children":[{"level":3,"title":"1. 初始化阶段","slug":"_1-初始化阶段","link":"#_1-初始化阶段","children":[]},{"level":3,"title":"2. 模版编译阶段","slug":"_2-模版编译阶段","link":"#_2-模版编译阶段","children":[]},{"level":3,"title":"3. 挂载更新阶段","slug":"_3-挂载更新阶段","link":"#_3-挂载更新阶段","children":[]},{"level":3,"title":"4. 销毁阶段","slug":"_4-销毁阶段","link":"#_4-销毁阶段","children":[]}]},{"level":2,"title":"5. 实例方法","slug":"_5-实例方法","link":"#_5-实例方法","children":[{"level":3,"title":"1. $set()","slug":"_1-set","link":"#_1-set","children":[]},{"level":3,"title":"2. $delete()","slug":"_2-delete","link":"#_2-delete","children":[]},{"level":3,"title":"3. $on(), $emit(), $off(), $once()","slug":"_3-on-emit-off-once","link":"#_3-on-emit-off-once","children":[]},{"level":3,"title":"4. $nextTick()","slug":"_4-nexttick","link":"#_4-nexttick","children":[]}]}],"git":{"updatedTime":1660215767000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":1}]},"filePathRelative":"frontend/vue/vue2/vue-source.md"}');export{u as comp,d as data};
