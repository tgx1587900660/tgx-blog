import{_ as l,o as i,c as e,e as o}from"./app-CkeFUswH.js";const s={},n=o('<h1 id="node-js-模块加载-机制" tabindex="-1"><a class="header-anchor" href="#node-js-模块加载-机制"><span>Node.js 模块加载 机制</span></a></h1><div class="custom-container tip"><p class="custom-container-title">模块说明</p><p>在 node.js 中模块分为 3 种：内置模块、自定义模块、第三方模块。</p></div><h2 id="_1-优先从缓存中加载" tabindex="-1"><a class="header-anchor" href="#_1-优先从缓存中加载"><span>1. 优先从缓存中加载</span></a></h2><div class="custom-container tip"><p class="custom-container-title">模块缓存机制</p><ul><li><strong>这 3 种模块在第一次加载后都会被缓存，从而提高加载效率</strong>。这也意味着多次调用 require() 不会导致模块的代码被执行多次。</li></ul></div><h2 id="_2-内置模块和第三方模块优先级" tabindex="-1"><a class="header-anchor" href="#_2-内置模块和第三方模块优先级"><span>2. 内置模块和第三方模块优先级</span></a></h2><div class="custom-container tip"><p class="custom-container-title">模块优先级</p><ul><li><strong>内置模块优先级较高</strong>。这也意味着内置模块与第三方模块同名时，加载的是内置模块</li></ul></div><h2 id="_3-自定义模块的加载机制" tabindex="-1"><a class="header-anchor" href="#_3-自定义模块的加载机制"><span>3. 自定义模块的加载机制</span></a></h2><div class="custom-container tip"><p class="custom-container-title">加载顺序</p><ul><li>加载自定义模块时需要指定路径</li><li>加载自定义模块时可以省略后缀名</li><li>例如：假设 demo 是个自定义模块，使用 require(&#39;./demo&#39;)，则查找顺序如下： <ul><li><ol><li>加载 <strong>demo</strong> 文件内容，若没有</li></ol></li><li><ol start="2"><li>加载 <strong>demo.js</strong> 文件内容，若没有</li></ol></li><li><ol start="3"><li>加载 <strong>demo.json</strong> 文件内容，若没有</li></ol></li><li><ol start="4"><li>加载 <strong>demo.node</strong> 文件内容，若没有</li></ol></li><li><ol start="5"><li>加载失败，报错</li></ol></li></ul></li></ul></div><h2 id="_4-第三方模块的加载机制" tabindex="-1"><a class="header-anchor" href="#_4-第三方模块的加载机制"><span>4. 第三方模块的加载机制</span></a></h2><div class="custom-container tip"><p class="custom-container-title">加载顺序</p><ul><li>加载第三方模块时也有查找顺序</li><li>例如：假设 demo 是个第三方模块，使用 require(&#39;demo&#39;)，则查找顺序如下： <ul><li><ol><li>加载 <strong>当前文件目录中 node_modules 下的 demo</strong> 文件内容</li></ol></li><li><ol start="2"><li>去 <strong>上一层文件目录中 node_modules 下的 demo</strong> 加载文件内容</li></ol></li><li><ol start="3"><li>继续去 <strong>上一层文件目录中 node_modules 下的 demo</strong> 加载文件内容</li></ol></li><li><ol start="4"><li>直到电脑磁盘根目录，加载失败就报错</li></ol></li></ul></li></ul></div><h2 id="_5-使用目录作为导入标识" tabindex="-1"><a class="header-anchor" href="#_5-使用目录作为导入标识"><span>5. 使用目录作为导入标识</span></a></h2><div class="custom-container tip"><p class="custom-container-title">加载说明</p><ul><li>以目录为模块导入时，也有查找顺序 <strong>（目录一般也是自定义模块）</strong></li><li>例如：假设 demo 是个 <strong>文件目录名</strong>，使用 require(&#39;demo&#39;)，则查找顺序如下： <ul><li><ol><li>查看 demo 文件夹中 package.json 里的 main 属性，作为导入入口</li></ol></li><li><ol start="2"><li>若 demo 文件夹中不存在 package.json 或 没有 main 属性，则加载 demo/index.js</li></ol></li><li><ol start="3"><li>若都找不到，就会报错：Error: Cannot find module &#39;xxx&#39;</li></ol></li></ul></li></ul></div><h2 id="_6-package-json-属性节点说明" tabindex="-1"><a class="header-anchor" href="#_6-package-json-属性节点说明"><span>6. package.json 属性节点说明</span></a></h2><ul><li>type: 用来指定该项目的模块化规范。module 表示使用 ES6 模块化规范，commonjs 表示使用 commonjs 模块化规范</li><li>name: 表示该项目的名称。如果该项目被发布到 npm ，则该属性作为 包的名字</li><li>version: 表示该项目的版本号。会同步到 npm</li><li>description: 表示该项目的表述。会同步到 npm</li><li>main: 为该项目提供的入口文件。外界进行导入时，要导入的那个 js 文件路径</li><li>types/typings: 这两个节点效果一样。用来指定声明文件的入口，例如设置为 <code>./index.d.ts</code> 则引入这个包就会具有 ts 的类型检测和代码提示功能(需要在 index.d.ts 中定义)</li><li>scripts: 收集脚本。可以用 npm run ... 来执行</li><li>keywords: 表示包关键字。会同步到 npm</li><li>auther: 指定包的作者。</li><li>license: 指定包的代码协议</li></ul>',14),t=[n];function a(r,d){return i(),e("div",null,t)}const m=l(s,[["render",a],["__file","module-loading.html.vue"]]),p=JSON.parse('{"path":"/backend/node/module-loading.html","title":"Node.js 模块加载 机制","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 优先从缓存中加载","slug":"_1-优先从缓存中加载","link":"#_1-优先从缓存中加载","children":[]},{"level":2,"title":"2. 内置模块和第三方模块优先级","slug":"_2-内置模块和第三方模块优先级","link":"#_2-内置模块和第三方模块优先级","children":[]},{"level":2,"title":"3. 自定义模块的加载机制","slug":"_3-自定义模块的加载机制","link":"#_3-自定义模块的加载机制","children":[]},{"level":2,"title":"4. 第三方模块的加载机制","slug":"_4-第三方模块的加载机制","link":"#_4-第三方模块的加载机制","children":[]},{"level":2,"title":"5. 使用目录作为导入标识","slug":"_5-使用目录作为导入标识","link":"#_5-使用目录作为导入标识","children":[]},{"level":2,"title":"6. package.json 属性节点说明","slug":"_6-package-json-属性节点说明","link":"#_6-package-json-属性节点说明","children":[]}],"git":{"updatedTime":1681811916000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":4}]},"filePathRelative":"backend/node/module-loading.md"}');export{m as comp,p as data};
