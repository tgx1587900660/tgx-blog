import{_ as t,r as p,o as i,c as l,a as s,b as n,d as o,w as c,e as a}from"./app-CkeFUswH.js";const r={},u=a(`<h1 id="依赖包-用法集合" tabindex="-1"><a class="header-anchor" href="#依赖包-用法集合"><span>依赖包 用法集合</span></a></h1><div class="custom-container tip"><p class="custom-container-title">栏目说明</p><p>本栏目记载了一些 <strong>服务端</strong> 相关的 <strong>第三方包</strong> 使用方法。</p></div><h2 id="_1-then-fs-读取文件内容" tabindex="-1"><a class="header-anchor" href="#_1-then-fs-读取文件内容"><span>1. <code>then-fs</code> 读取文件内容</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>由于 node.js 官方提供的 fs 模块 <strong>仅支持以回调函数</strong> 的方式读取文件，不支持 Promise 的调用方式。因此，我们要借助 <code>then-fs</code> 来基于 Promise 的方式读取文件的内容</p></div><h4 id="_1-then-fs-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-then-fs-有什么用"><span>1. <code>then-fs</code> 有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>then-fs</code> 是一个 node.js 服务端 的三方依赖包。</li><li><code>then-fs</code> 可以基于 Promise 的方式来读取系统文件。提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 Promise 的实例对象。因此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数</li></ul></div><h4 id="_2-使用方法" tabindex="-1"><a class="header-anchor" href="#_2-使用方法"><span>2. 使用方法</span></a></h4><ul><li>第一步：安装</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm i then-fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),d=a(`<details class="custom-container details"><summary>点击查看使用案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用这个包，分 2 步：</span>
<span class="token comment">// 1. 导入包得到一个对象</span>
<span class="token comment">// 2. 调用该对象的 readFile 方法即可</span>


<span class="token comment">// 1. 引入包</span>
<span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>

<span class="token comment">// 2. 调用 readFile() 方法读取文件</span>
<span class="token comment">// 该方法返回一个 Promise 实例对象，因此可以访问 then() 方法</span>
thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./file.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">success</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_2-nodemon-监听-node-服务文件" tabindex="-1"><a class="header-anchor" href="#_2-nodemon-监听-node-服务文件"><span>2. <code>nodemon</code> 监听 node 服务文件</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>使用 node 执行代码后，如果代码发生变动，必须重新执行才能生效。</p></div><h4 id="_1-nodemon-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-nodemon-有什么用"><span>1. <code>nodemon</code> 有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>nodemon</code> 是一个 node.js 服务端 的三方依赖包。</li><li><code>nodemon</code> 可以实时监听我们代码的变动，并自动执行文件。</li></ul></div><h4 id="_2-使用方法-1" tabindex="-1"><a class="header-anchor" href="#_2-使用方法-1"><span>2. 使用方法</span></a></h4><ul><li>第一步：全局安装</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm install -g nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步：使用</li></ul><details class="custom-container details"><summary>点击查看使用案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用这个包，分 1 步：</span>
<span class="token comment">// 1. 直接使用 nodemon 命令运行文件即可</span>


<span class="token comment">// 1. 假设现在要执行一个 demo.js 文件</span>
node demo<span class="token punctuation">.</span>js <span class="token comment">// 原始：使用 node 执行</span>
nodemon demo<span class="token punctuation">.</span>js <span class="token comment">// 现在：使用 nodemon 执行，demo.js 变动后无需重启，可以自动更新</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_3-mysql-操作数据库" tabindex="-1"><a class="header-anchor" href="#_3-mysql-操作数据库"><span>3. <code>mysql</code> 操作数据库</span></a></h2><h4 id="_1-mysql-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-mysql-有什么用"><span>1. <code>mysql</code> 有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>mysql</code> 是一个 node.js 服务端 的三方依赖包。</li><li>默认情况下，<strong>项目</strong> 与 <strong>数据库</strong> 是 <strong>不存在联系的</strong>。<code>mysql</code> 提供了在 Node.js 项目中 <strong>连接和操作</strong> MySQL 数据库的能力。</li></ul></div><h4 id="_2-使用方法-2" tabindex="-1"><a class="header-anchor" href="#_2-使用方法-2"><span>2. 使用方法</span></a></h4><ul><li>第一步：项目中安装</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm install mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步：项目中使用</li></ul><details class="custom-container details"><summary>点击查看 如何连接并测试 mysql 数据库</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用这个包，分 4 步：</span>
<span class="token comment">// 1. 导入包，得到一个 对象</span>
<span class="token comment">// 2. 调用 该对象的 createPool 方法创建一个 连接对象 (创建时需要传入一个配置对象)</span>
<span class="token comment">// 3. 测试 连接对象 是否正常工作</span>
<span class="token comment">// 4. 使用 连接对象 操作 数据库</span>


<span class="token comment">// 1. 导入 mysql 模块</span>
<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 建立与 MySQL 数据库 的连接</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 数据库 ip 地址</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 登录数据库的用户名</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin123&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 登录数据库的密码</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;my_db_01&#39;</span> <span class="token comment">// 指定要操作的 数据库名称</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 检测 mysql 模块是否正常工作</span>
<span class="token comment">// 其中：&#39;select 1&#39; 这个SQL语句在这里没什么实质性作用，仅仅用于检测</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;select 1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// err 是错误对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token comment">// results 是查询结果 // [ RowDataPacket { &#39;1&#39;: 1 } ]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 4. 在项目中使用...</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>点击查看 如何查询数据</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查询数据，分 2 步：</span>
<span class="token comment">// 1. 编写 SQL 语句</span>
<span class="token comment">// 2. 调用 连接对象的 qurey 方法执行</span>


<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin123&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;my_db_01&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 案例: 查询 users 表中所有数据</span>
<span class="token comment">// 1. 编写 SQL 语句</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;select * from users&#39;</span>
<span class="token comment">// 2. 调用 连接对象的 qurey 方法查询</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token comment">// 用 select 查询到的 results 是个数组, 里面是一个又一个对象</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>点击查看 如何插入数据</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 插入数据，分 3 步：</span>
<span class="token comment">// 1. 定义一个要插入的对象</span>
<span class="token comment">// 2. 编写 SQL 语句</span>
<span class="token comment">// 3. 调用 连接对象的 qurey 方法执行</span>


<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin123&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;my_db_01&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 案例一: 向 users 中插入一条数据, username为Spider-Man, password为pcc321</span>
<span class="token comment">// sql 语句中可以用 ? 来进行占位, 执行时 用数组对应替换即可</span>
<span class="token comment">// 1. 定义一个要插入的对象</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;Spider-Man&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;pcc321&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 2. 编写 SQL 语句</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;insert into users (username, password) values (?, ?)&#39;</span>
<span class="token comment">// 3. 调用 连接对象的 qurey 方法执行</span>
<span class="token comment">// 用 insert into 查询到的 results 是个对象</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token comment">// 可以通过 affectedRows影响的行数 可以知道是否插入成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;插入数据成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 案例二: 使用快捷方式 向 users 中插入一条数据</span>
<span class="token comment">// 要求：数据对象的 每个属性和数据表的字段一一对应，执行时，直接用对象替换</span>
<span class="token comment">// 1. 定义一个要插入的对象</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;Spider-Man2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;pcc000&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 2. 编写 SQL 语句</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;insert into users set ?&#39;</span>
<span class="token comment">// 3. 调用 连接对象的 qurey 方法执行</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;插入数据成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>点击查看 如何更新数据</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 插入数据，分 3 步：</span>
<span class="token comment">// 1. 定义一个要插入的对象</span>
<span class="token comment">// 2. 编写 SQL 语句</span>
<span class="token comment">// 3. 调用 连接对象的 qurey 方法执行</span>


<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin123&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;my_db_01&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 案例一: 更新 users 中的一条数据（思想与插入数据类似）</span>
<span class="token comment">// 1. 定义一个要插入的对象</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;000&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 2. 编写 SQL 语句</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;update users set username=?, password=? where id=?&#39;</span>
<span class="token comment">// 3. 调用 连接对象的 qurey 方法执行</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;更新数据成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 案例二: 使用便捷方式 更新 users 中的一条数据（思想与插入数据类似）</span>
<span class="token comment">// 1. 定义一个要插入的对象</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;aaa2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;0002&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 2. 编写 SQL 语句</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;update users set ? where id=?&#39;</span>
<span class="token comment">// 3. 调用 连接对象的 qurey 方法执行</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;更新数据成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><blockquote><p>标记删除思想：真正执行 delete 语句过于危险，无法恢复数据。因此我们可以在设计表时定义一个 status 状态字段， 用来标记某条数据是否为 &#39;已删除状态&#39;，实际操作时，我们使用的是 update 语句来修改这条数据的 &#39;删除状态&#39; ，从而实现删除效果。</p></blockquote><details class="custom-container details"><summary>点击查看 如何删除数据</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 插入数据，分 2 步：</span>
<span class="token comment">// 1. 编写 SQL 语句</span>
<span class="token comment">// 2. 调用 连接对象的 qurey 方法执行</span>


<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin123&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;my_db_01&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 案例一: 删除 users 中的一条数据（不推荐）</span>
<span class="token comment">// 1. 编写 SQL 语句</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;delete from users where id=?&#39;</span>
<span class="token comment">// 2. 调用 连接对象的 qurey 方法执行</span>
<span class="token comment">// 这个 id 值可以直接写 5 也可以写成 [5] (取决于操作的数据 是单个还是多个)</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除数据成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 案例二: 使用标记删除思想 删除 users 中的一条数据（推荐）</span>
<span class="token comment">// 1. 编写 SQL 语句</span>
<span class="token comment">// 这里设计的 status 用来标记用户是否启用 0 为正常 1为禁用</span>
<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">&#39;update users set status=? where id=?&#39;</span>
<span class="token comment">// 2. 调用 连接对象的 qurey 方法执行</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;标记删除成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_4-express-session-身份认证" tabindex="-1"><a class="header-anchor" href="#_4-express-session-身份认证"><span>4. <code>express-session</code> 身份认证</span></a></h2><h4 id="_1-express-session-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-express-session-有什么用"><span>1. <code>express-session</code> 有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>express-session</code> 是一个 node.js 服务端 的三方依赖包。</li><li><code>express-session</code> 可以便捷地在客户端进行 session 身份认证。</li></ul></div><h4 id="_2-使用方法-3" tabindex="-1"><a class="header-anchor" href="#_2-使用方法-3"><span>2. 使用方法</span></a></h4><ul><li>第一步: 安装</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm i express-session
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步: 使用</li></ul><details class="custom-container details"><summary>点击查看 如何在 express 项目中 保存、获取、删除 session 信息</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 完整使用这个包，分 5 步：</span>
<span class="token comment">// 1. 导入包, 得到一个方法</span>
<span class="token comment">// 2. 调用这个方法,传入一个配置对象, 同时注册为中间件</span>
<span class="token comment">// 3. 注册后, req 上会自动挂载一个 session 属性 (用于存储用户信息, 供后续使用)</span>
<span class="token comment">// 4. session 属性上有一个 destroy() 用于销毁当前用户信息</span>


<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 导入</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express-session&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 注册 express-session 中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&#39;tgx&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 任意写，用来加密的</span>
    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 固定写法</span>
    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 固定写法</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment">// 其他代码...</span>

<span class="token comment">// 登录的 API 接口</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断用户提交的登录信息是否正确</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">&#39;admin&#39;</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">&#39;000000&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;登录失败&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 3.1 将登录成功后的用户信息，保存到 Session 中</span>
  <span class="token comment">// 只有成功注册 express-session 中间件后 req 才有 session 这个属性</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> req<span class="token punctuation">.</span>body <span class="token comment">// 将用户信息存入 Session 中</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>islogin <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 设置用户登录状态存入 Session 中</span>

  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;登录成功&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 获取用户姓名的接口</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/username&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 3.2 从 Session 中获取用户的名称，响应给客户端</span>
  <span class="token comment">// 判断是否登录了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>islogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;fail&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 退出登录的接口</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/logout&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 4. 清空当前用户 Session 信息</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// destroy() 方法只会清除当前用户的信息</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_5-jsonwebtoken-和-express-jwt-认证" tabindex="-1"><a class="header-anchor" href="#_5-jsonwebtoken-和-express-jwt-认证"><span>5. <code>jsonwebtoken</code> 和 <code>express-jwt</code> 认证</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p><code>jsonwebtoken</code> 和 <code>express-jwt</code> 都是 node.js 服务端 的三方依赖包。</p></div><h4 id="_1-这-2-个包有什么用" tabindex="-1"><a class="header-anchor" href="#_1-这-2-个包有什么用"><span>1. 这 2 个包有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>jsonwebtoken</code> 用于生成 JWT 字符串</li><li><code>express-jwt</code> 用于将 JWT 字符串解析还原成 JSON 对象</li></ul></div><h4 id="_2-使用方法-4" tabindex="-1"><a class="header-anchor" href="#_2-使用方法-4"><span>2. 使用方法</span></a></h4><ul><li>第一步: 安装 2 个包</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm i jsonwebtoken express-jwt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步: 使用</li></ul><details class="custom-container details"><summary>点击查看 2 个包的具体使用步骤</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用这两个包，分 7 步：</span>
<span class="token comment">// 1. 导入两个包</span>
<span class="token comment">// 2. 定义 secret 密钥</span>
<span class="token comment">// 3. 等待用户第一次登录成功，返回对应内容 （客户端请求登录接口）</span>
<span class="token comment">// 4. 用 jsonwebtoken 包 加密用户信息成 token 字符串，返回给客户端保存</span>
<span class="token comment">// 5. 注册 express-jwt解密 中间件</span>
<span class="token comment">// 6. 等待用户请求权限接口，返回对应内容 （客户端请求需要权限的接口）</span>
<span class="token comment">// 7. 使用错误处理中间件，捕获 解析 JWT 失败产生的错误（防止程序崩溃）</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 导入两个包</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 用于加密的包</span>
<span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express-jwt&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 用于解析的包</span>

<span class="token comment">// 允许跨域资源共享</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 解析 post 表单数据的中间件</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 定义 secret 密钥，token 进行解密、加密时都要用到 (随便起，越复杂越好)</span>
<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&#39;tgx-XXX -_-&#39;</span>

<span class="token comment">// 5. 注册将 JWT 字符串解析还原成 JSON 对象的中间件</span>
<span class="token comment">// expressJWT({secret: secretKey}) 用来解析 token 字符串</span>
<span class="token comment">// unless({ path: [/^\\/api\\//] }) 用来指定 哪些接口不需要访问权限</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> secretKey<span class="token punctuation">,</span>
    <span class="token literal-property property">algorithms</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment">// 登录接口</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> userinfo <span class="token operator">=</span> req<span class="token punctuation">.</span>body
  <span class="token comment">// 登录失败</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>userinfo<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">&#39;admin&#39;</span> <span class="token operator">||</span> userinfo<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">&#39;000000&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;登录失败！&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 登录成功</span>
  <span class="token comment">// 3. 登录成功后，把用户信息加密成 JWT 字符串。并通过 token 属性发送给客户端</span>
  <span class="token comment">// jwt.sign() 方法接收 3 个参数</span>
  <span class="token comment">// 参数1: 用户的信息对象（一定不要放密码）</span>
  <span class="token comment">// 参数2: 加密的秘钥</span>
  <span class="token comment">// 参数3: 配置对象, 可配置 token 有效期</span>
  <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> userinfo<span class="token punctuation">.</span>username
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    secretKey<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>

  <span class="token comment">// 4. 把加密的 用户信息 token 字符串，返回给客户端保存</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;登录成功！&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">token</span><span class="token operator">:</span> tokenStr <span class="token comment">// 要发送给客户端保存的 token 字符串</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 这是一个有权限的 API 接口</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/admin/getinfo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 6. 使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span>
  <span class="token comment">// req 中的 user 属性是在注册了 express-jwt 中间件后被自动挂载的</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token comment">// {username:&#39;admin&#39;, iat:1646731406, exp:1646731436}</span>

  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;获取用户信息成功！&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> req<span class="token punctuation">.</span>user <span class="token comment">// 要发送给客户端的用户信息</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 7. 使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;UnauthorizedError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// token 解析失败导致 (防止程序崩溃)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;无效的 token&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;未知错误&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Express server running at http://127.0.0.1:8888&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_6-cors-允许跨域" tabindex="-1"><a class="header-anchor" href="#_6-cors-允许跨域"><span>6. <code>cors</code> 允许跨域</span></a></h2><h4 id="_1-cors-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-cors-有什么用"><span>1. <code>cors</code> 有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>cors</code> 是一个 node.js 服务端 的三方依赖包。</li><li><code>cors</code> 可以便捷地在客户端 设置跨域资源访问</li></ul></div><h4 id="_2-使用方法-5" tabindex="-1"><a class="header-anchor" href="#_2-使用方法-5"><span>2. 使用方法</span></a></h4><ul><li>第一步: 安装</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm i cors@2.8.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步: 使用</li></ul><details class="custom-container details"><summary>点击查看 cors 具体用法</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用 cors， 分 2 步：</span>
<span class="token comment">// 1. 导入包</span>
<span class="token comment">// 2. 注册为中间件</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 导入包</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 注册为中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_7-bcryptjs-密码加密" tabindex="-1"><a class="header-anchor" href="#_7-bcryptjs-密码加密"><span>7. <code>bcryptjs</code> 密码加密</span></a></h2><h4 id="_1-bcryptjs-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-bcryptjs-有什么用"><span>1. <code>bcryptjs</code> 有什么用？</span></a></h4><div class="custom-container tip"><p class="custom-container-title">具体作用</p><ul><li><code>bcryptjs</code> 是一个 node.js 服务端 的三方依赖包。</li><li><code>bcryptjs</code> 可以对明文密码进行加密 <ul><li>加密后的密码，无法被逆向破解</li><li>多个用户使用同一个密码，被加密后，得到的结果不同</li></ul></li></ul></div><h4 id="_2-使用方法-6" tabindex="-1"><a class="header-anchor" href="#_2-使用方法-6"><span>2. 使用方法</span></a></h4><ul><li>第一步: 安装</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm i bcryptjs@2.4.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步: 使用</li></ul><details class="custom-container details"><summary>点击查看 bcryptjs 具体用法</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用 bcryptjs 分 3 步：</span>
<span class="token comment">// 1. 导入包</span>
<span class="token comment">// 2. 调用包的 hashSync(密码, 数字) 方法加密</span>
<span class="token comment">// 3. 调用包的 compareSync(密码, 数据库的加密密码) 方法解密</span>


<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 1. 导入包</span>
<span class="token keyword">const</span> bcrypt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;bcryptjs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 进行加密并覆盖(其中 10 是随机盐长度，越大表示密码越复杂，时间也越久)</span>
userinfo<span class="token punctuation">.</span>password <span class="token operator">=</span> bcrypt<span class="token punctuation">.</span><span class="token function">hashSync</span><span class="token punctuation">(</span>userinfo<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// 3. 登录时解密 bcrypt.compareSync(明文密码, 加密密码) 返回布尔值</span>
<span class="token comment">// results 是查询用户的结果</span>
<span class="token keyword">const</span> compareRes <span class="token operator">=</span> bcrypt<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>userinfo<span class="token punctuation">.</span>password<span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>compareRes<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;密码错误&#39;</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,56);function k(v,m){const e=p("tgx-link");return i(),l("div",null,[u,s("ul",null,[s("li",null,[n("第二步：使用"),o(e,{href:"https://www.npmjs.com/package/then-fs"},{default:c(()=>[n("（点击查看具体使用文档）")]),_:1})])]),d])}const h=t(r,[["render",k],["__file","third-party-packages.html.vue"]]),g=JSON.parse('{"path":"/backend/packages/third-party-packages.html","title":"依赖包 用法集合","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. then-fs 读取文件内容","slug":"_1-then-fs-读取文件内容","link":"#_1-then-fs-读取文件内容","children":[]},{"level":2,"title":"2. nodemon 监听 node 服务文件","slug":"_2-nodemon-监听-node-服务文件","link":"#_2-nodemon-监听-node-服务文件","children":[]},{"level":2,"title":"3. mysql 操作数据库","slug":"_3-mysql-操作数据库","link":"#_3-mysql-操作数据库","children":[]},{"level":2,"title":"4. express-session 身份认证","slug":"_4-express-session-身份认证","link":"#_4-express-session-身份认证","children":[]},{"level":2,"title":"5. jsonwebtoken 和 express-jwt 认证","slug":"_5-jsonwebtoken-和-express-jwt-认证","link":"#_5-jsonwebtoken-和-express-jwt-认证","children":[]},{"level":2,"title":"6. cors 允许跨域","slug":"_6-cors-允许跨域","link":"#_6-cors-允许跨域","children":[]},{"level":2,"title":"7. bcryptjs 密码加密","slug":"_7-bcryptjs-密码加密","link":"#_7-bcryptjs-密码加密","children":[]}],"git":{"updatedTime":1681896054000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":2}]},"filePathRelative":"backend/packages/third-party-packages.md"}');export{h as comp,g as data};
