import{_ as n,o as s,c as a,e as t}from"./app-CkeFUswH.js";const e={},o=t(`<h1 id="vue-router-知识复习" tabindex="-1"><a class="header-anchor" href="#vue-router-知识复习"><span>Vue-Router 知识复习</span></a></h1><h2 id="_1-什么是路由" tabindex="-1"><a class="header-anchor" href="#_1-什么是路由"><span>1. 什么是路由？</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>路由分为 <strong>前端路由</strong> 和 <strong>后端路由</strong></p></div><ul><li><strong>路由</strong> 的本质是 <strong>对应关系</strong>。</li><li><strong>后端路由</strong> 是指 <strong>请求地址、请求方式</strong> 与 <strong>处理函数</strong> 的对应关系。</li><li><strong>前端路由</strong> 是指 <strong>哈希地址</strong> 与 <strong>组件</strong> 的对应关系。</li></ul><h2 id="_2-怎么样实现一个前端路由" tabindex="-1"><a class="header-anchor" href="#_2-怎么样实现一个前端路由"><span>2. 怎么样实现一个前端路由？</span></a></h2><div class="custom-container tip"><p class="custom-container-title">前提条件</p><ul><li>同一个页面能通过 <strong>a 链接的锚点</strong> 快速定位内容区域，而无需刷新页面</li><li>Vue 的 component 动态组件可以条件渲染某个组件</li><li>浏览器的 window.onhashchange 事件可以监听 <strong>哈希值</strong>（a 链接的锚点）的变化</li></ul></div><ul><li>第一步：在页面放置一些 a 链接，并设置 hash 值，例如<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- #/one 和 #/two 是锚点，也称 hash 值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/two<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>第二步：在页面放置一个动态组件，给一个动态组件名，例如：<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- comName 是 vue 组件的名字 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>comName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>第三步：在 onhashchange 事件中定义 <strong>哈希值</strong> 与 <strong>组件</strong> 的对应关系，并根据 <strong>哈希值变化</strong> 动态改变 <strong>组件</strong><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;#/one&#39;</span><span class="token operator">:</span>
      <span class="token comment">// 显示 one 组件</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;#/two&#39;</span><span class="token operator">:</span>
      <span class="token comment">// 显示 two 组件</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-vue-router-插件" tabindex="-1"><a class="header-anchor" href="#_3-vue-router-插件"><span>3. vue-router 插件</span></a></h2><div class="custom-container tip"><p class="custom-container-title">插件说明</p><p>vue-router 是 vue 项目中的 <strong>前端路由解决方案</strong>。只需简单配置就能完成复杂的前端路由功能</p></div><ul><li>使用条件： <ul><li>安装 vue-router 依赖包到 <strong>生产环境</strong></li><li>用 Vue.use() 注册该插件</li></ul></li></ul><h3 id="_1-vue-router-中易混概念" tabindex="-1"><a class="header-anchor" href="#_1-vue-router-中易混概念"><span>1. vue-router 中易混概念</span></a></h3><ul><li>this.$router 是路由的 <strong>导航对象</strong></li><li>this.$route 是路由的 <strong>参数对象</strong></li><li>地址栏 / 后面的是 <strong>路径参数</strong>，例如 /instance/3</li><li>地址栏 ? 后面的是 <strong>查询参数</strong>，例如 /instance?id=3</li><li>要用 this.$route.params 来访问 <strong>路径参数</strong></li><li>要用 this.$route.query 来访问 <strong>查询参数</strong></li></ul><h3 id="_2-vue-router-语法知识点" tabindex="-1"><a class="header-anchor" href="#_2-vue-router-语法知识点"><span>2. vue-router 语法知识点</span></a></h3><ul><li><p>在配置文件中编写 <strong>路由规则</strong></p></li><li><p>用 <strong>&quot;router-view&quot; 标签</strong> 来动态 <strong>匹配组件</strong></p></li><li><p>用 <strong>&quot;router-link&quot; 标签</strong> 来代替 <strong>&quot;a&quot; 标签</strong></p></li><li><p>嵌套路由中 <strong>children 节点</strong> 内的 path 可以不加 /</p></li><li><p>嵌套路由中 <strong>children 节点</strong> 内某个规则 path 如果为空 &quot;&quot;，则称为 <strong>默认子路由</strong></p></li><li><p>给路由规则 <strong>开启 props 传参</strong>，就可以在 <strong>组件</strong> 中拿到 <strong>动态路由参数</strong>，例如</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一步：在 路由规则router.js中 写一条规则</span>
<span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/instance/:objId&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> InstanceDetail<span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">]</span>

<span class="token comment">// 第二步：在 InstanceDetail 组件中 直接用 props 接收</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;objId&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// objId 就是路由中的动态参数</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-vue-router-的导航模式" tabindex="-1"><a class="header-anchor" href="#_3-vue-router-的导航模式"><span>3. vue-router 的导航模式</span></a></h3><div class="custom-container tip"><p class="custom-container-title">两种导航模式</p><ul><li>声明式导航：通过 <strong>a 链接 或 router-link 标签</strong> 直接定义实现的跳转</li><li>编程式导航：通过 <strong>路由 api</strong> 在脚本中实现的跳转</li></ul></div><details class="custom-container details"><summary>点击查看 声明式导航 案例</summary><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 直接在 HTML 中写入 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>点击查看 编程式导航 案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 方法一： this.$router.push() 会 增加 一条历史记录</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/one&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">objId</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 方法二： this.$router.replace() 会 替换 当前历史记录</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/one&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">objId</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 方法三： this.$router.go(n) 会跳转 n 步，若超出，则不动</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等同于 this.$router.go(-1)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等同于 this.$router.go(1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,18),p=[o];function l(c,i){return s(),a("div",null,p)}const u=n(e,[["render",l],["__file","vue-router.html.vue"]]),d=JSON.parse('{"path":"/frontend/vue/vue2/vue-router.html","title":"Vue-Router 知识复习","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 什么是路由？","slug":"_1-什么是路由","link":"#_1-什么是路由","children":[]},{"level":2,"title":"2. 怎么样实现一个前端路由？","slug":"_2-怎么样实现一个前端路由","link":"#_2-怎么样实现一个前端路由","children":[]},{"level":2,"title":"3. vue-router 插件","slug":"_3-vue-router-插件","link":"#_3-vue-router-插件","children":[{"level":3,"title":"1. vue-router 中易混概念","slug":"_1-vue-router-中易混概念","link":"#_1-vue-router-中易混概念","children":[]},{"level":3,"title":"2. vue-router 语法知识点","slug":"_2-vue-router-语法知识点","link":"#_2-vue-router-语法知识点","children":[]},{"level":3,"title":"3. vue-router 的导航模式","slug":"_3-vue-router-的导航模式","link":"#_3-vue-router-的导航模式","children":[]}]}],"git":{"updatedTime":1660215767000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":1}]},"filePathRelative":"frontend/vue/vue2/vue-router.md"}');export{u as comp,d as data};
