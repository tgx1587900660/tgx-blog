import{_ as e,o as l,c as a,e as s}from"./app-CkeFUswH.js";const i="/tgx-blog/assets/loader-study-h-RTd8zE.png",c={},n=s('<h1 id="webpack-知识" tabindex="-1"><a class="header-anchor" href="#webpack-知识"><span>webpack 知识</span></a></h1><h2 id="_1-webpack-的工作流程" tabindex="-1"><a class="header-anchor" href="#_1-webpack-的工作流程"><span>1. webpack 的工作流程</span></a></h2><div class="custom-container tip"><p class="custom-container-title">工作流程</p><ul><li>先判断这个文件是不是 .js 文件，如果不是，就去找对应的 loader，如果找不到，就报错</li><li>如果找到了 loader，就交给 loader 处理</li><li>如果文件是 .js 文件，且不包含高级语法，就直接处理</li><li>如果文件是 .js 文件，且包含高级语法，就要找 babel-loader 处理</li><li>如果 babel-loader 没有配置，就报错，配置了，就在处理成 .js 后再交给 webpack</li></ul></div><img src="'+i+`" title="loader 调用过程示意图" alt="loader 调用过程示意图"><blockquote><p>webpack 是前端工程化的一个具体的解决方案。它可以实现前端工程化的四大原则</p></blockquote><p>现代前端开发四原则：</p><ul><li>模块化（js 的模块化、css 的模块化、资源的模块化）</li><li>组件化（复用现有的 UI 结构、样式、行为）</li><li>规范化（目录结构的划分、编码规范化、接口规范化、文档规范化、 Git 分支管理）</li><li>自动化（自动化构建、自动部署、自动化测试）</li></ul><h2 id="_2-使用-webpack" tabindex="-1"><a class="header-anchor" href="#_2-使用-webpack"><span>2. 使用 webpack</span></a></h2><div class="custom-container tip"><p class="custom-container-title">安装位置</p><p>webpack 主要用于打包压缩源码。只需要安装到开发环境</p></div><ul><li><ol><li>第一步：安装两个依赖包</li></ol><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>npm install webpack@5.42.1 webpack-cli@4.7.2 -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><ol start="2"><li>第二步：package.json 中添加脚本</li></ol><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>&quot;dev&quot;: &quot;webpack&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><ol start="3"><li>第三步：编写 webpack.config.js 配置文件</li></ol><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>module.exports = {...}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_3-webpack-插件" tabindex="-1"><a class="header-anchor" href="#_3-webpack-插件"><span>3. webpack 插件</span></a></h2><div class="custom-container tip"><p class="custom-container-title">意义</p><p>webpack 支持插件功能，扩展性更强，让开发者实现更多自动化功能，使开发人员更专注于业务</p></div><h3 id="_1-webpack-dev-server-插件" tabindex="-1"><a class="header-anchor" href="#_1-webpack-dev-server-插件"><span>1. webpack-dev-server 插件</span></a></h3><ul><li><p><strong>插件作用：</strong> 该插件会在内存中生成一个开发阶段的 bundle.js 文件，为了避免频繁读写物理磁盘， 生成的这个 bundle.js 文件是不可见的，但是可以在根目录下被访问</p></li><li><p><strong>插件使用：</strong> 安装 webpack-dev-server 插件包，并将脚本改为 &quot;dev&quot;: &quot;webpack serve&quot; 即可使用自动更新功能</p></li></ul><h3 id="_2-html-webpack-plugin-插件" tabindex="-1"><a class="header-anchor" href="#_2-html-webpack-plugin-插件"><span>2. html-webpack-plugin 插件</span></a></h3><ul><li><p><strong>插件作用：</strong> 为了启动服务时直接进入首页，该插件会自动复制一份模板 index.html 到根目录（内存中）下，同时自动注入同级目录内存中的 bundle.js，从而使得开发页面被自动访问。其中这个 bundle.js 是由插件 webpack-dev-server 生成的。</p></li><li><p><strong>插件使用：</strong> 安装 html-webpack-plugin 插件包，引入它得到一个构造函数，用 new 的方法创建一个实例对象，并传入一个对象配置它的模板文件，再把这个实例对象放入 webpack 的配置文件属性 plugin 数组中</p></li></ul><h3 id="_3-clean-webpack-plugin-插件" tabindex="-1"><a class="header-anchor" href="#_3-clean-webpack-plugin-插件"><span>3. clean-webpack-plugin 插件</span></a></h3><ul><li><p><strong>插件作用：</strong> 为了让 webpack 每次打包时都自动删一次生成的 dist 目录，因为多次打包会合并文件，容易出现图片或文件重复，使得开发人员对多余的文件感到困惑</p></li><li><p><strong>插件使用：</strong> 安装 clean-webpack-plugin 插件包，查阅它的文档复制用法即可</p></li></ul><h2 id="_4-webpack-加载器" tabindex="-1"><a class="header-anchor" href="#_4-webpack-加载器"><span>4. webpack 加载器</span></a></h2><div class="custom-container tip"><p class="custom-container-title">意义</p><p>webpack 只能识别 .js 文件，因此需要 <code>加载器(loader)</code> 来处理其他格式的文件</p></div><h3 id="_1-处理-css-文件" tabindex="-1"><a class="header-anchor" href="#_1-处理-css-文件"><span>1. 处理 .css 文件</span></a></h3><p>要处理.css 文件，需要安装 style-loader 和 css-loader 依赖包，当 webpack 遇到.css 文件时，发现处理不了，便前往配置文件 module.rules 数组中查看 loader，接着根据 loader 顺序从后往前处理，先用 css-loader 处理，再用 style-loader 处理，然后将结果合并到 bundle.js 中</p><h3 id="_2-处理-less-文件" tabindex="-1"><a class="header-anchor" href="#_2-处理-less-文件"><span>2. 处理 .less 文件</span></a></h3><p>要处理.less 文件，需要安装 less-loader 和 less，由于 less 是被 less-loader 内部依赖的，所有要安装这个包，但只需要配置 less-loader 即可</p><h3 id="_3-处理-文件路径" tabindex="-1"><a class="header-anchor" href="#_3-处理-文件路径"><span>3. 处理 文件路径</span></a></h3><p>假设在页面在要引入一张图片，就会使用类似./img/logo.png 写法，这种路径 webpack 无法识别。因此要安装 url-loader 和 file-loader 依赖包，由于 file-loader 是被 url-loader 内部依赖的，所有要安装这个包。</p><p>但只需要配置 url-loader 即可，其中 url-loader?limit=470&amp;outputPath=images 表示大于 470 字节的图片就直接使用路径形式，小于等于 470 字节的图片会被转成 base64 格式，且图片被打包后要放在 dist/images 目录下，也可用对象配置参数这两个参数。</p><h3 id="_4-处理-js-高级语法" tabindex="-1"><a class="header-anchor" href="#_4-处理-js-高级语法"><span>4. 处理 js 高级语法</span></a></h3><p>webpack 只能处理一部分 js 文件，对于高级语法，需要借助 babel-loader 来处理。</p><p>比如：要处理装饰器语法，就需要安装 babel-loader、@babel/core、@babel/plugin-proposal-decorators 这 3 个依赖包，同时创建 babel.config.js 配置文件，去 babel 官网找对应的配置复制即可</p><h3 id="_5-处理-ts-文件" tabindex="-1"><a class="header-anchor" href="#_5-处理-ts-文件"><span>5. 处理 .ts 文件</span></a></h3><p>如果项目中用到了 typescript ，需要借助 ts-loader 加载器来把 .ts 文件处理成 js 文件。</p>`,32),t=[n];function p(r,d){return l(),a("div",null,t)}const b=e(c,[["render",p],["__file","webpack-study.html.vue"]]),u=JSON.parse('{"path":"/frontend/tools/webpack-study.html","title":"webpack 知识","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. webpack 的工作流程","slug":"_1-webpack-的工作流程","link":"#_1-webpack-的工作流程","children":[]},{"level":2,"title":"2. 使用 webpack","slug":"_2-使用-webpack","link":"#_2-使用-webpack","children":[]},{"level":2,"title":"3. webpack 插件","slug":"_3-webpack-插件","link":"#_3-webpack-插件","children":[{"level":3,"title":"1. webpack-dev-server 插件","slug":"_1-webpack-dev-server-插件","link":"#_1-webpack-dev-server-插件","children":[]},{"level":3,"title":"2. html-webpack-plugin 插件","slug":"_2-html-webpack-plugin-插件","link":"#_2-html-webpack-plugin-插件","children":[]},{"level":3,"title":"3. clean-webpack-plugin 插件","slug":"_3-clean-webpack-plugin-插件","link":"#_3-clean-webpack-plugin-插件","children":[]}]},{"level":2,"title":"4. webpack 加载器","slug":"_4-webpack-加载器","link":"#_4-webpack-加载器","children":[{"level":3,"title":"1. 处理 .css 文件","slug":"_1-处理-css-文件","link":"#_1-处理-css-文件","children":[]},{"level":3,"title":"2. 处理 .less 文件","slug":"_2-处理-less-文件","link":"#_2-处理-less-文件","children":[]},{"level":3,"title":"3. 处理 文件路径","slug":"_3-处理-文件路径","link":"#_3-处理-文件路径","children":[]},{"level":3,"title":"4. 处理 js 高级语法","slug":"_4-处理-js-高级语法","link":"#_4-处理-js-高级语法","children":[]},{"level":3,"title":"5. 处理 .ts 文件","slug":"_5-处理-ts-文件","link":"#_5-处理-ts-文件","children":[]}]}],"git":{"updatedTime":1660817193000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":6}]},"filePathRelative":"frontend/tools/webpack-study.md"}');export{b as comp,u as data};
