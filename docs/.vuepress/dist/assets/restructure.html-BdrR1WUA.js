import{_ as n,o as s,c as a,e as t}from"./app-CkeFUswH.js";const p={},e=t(`<h1 id="javascript-重构小技巧" tabindex="-1"><a class="header-anchor" href="#javascript-重构小技巧"><span>JavaScript 重构小技巧</span></a></h1><div class="custom-container tip"><p class="custom-container-title">起因</p><p>本栏目源于一本书，名为《重构》。书中提倡：一个项目的重构，不应该一次性推倒重写，而应该在不破坏功能的情况下一点一点地优化代码。 在这里，我挑出了一些自己常用的、真正有效果的技巧作为成果，一方面验证自己没有白看此书，另一方也表达我此书观念上的认同。</p></div><h2 id="_1-减少重复访问引用类型的属性次数" tabindex="-1"><a class="header-anchor" href="#_1-减少重复访问引用类型的属性次数"><span>1. 减少重复访问引用类型的属性次数</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>这种技巧常用在 <strong>循环</strong> 中</p></div><details class="custom-container details"><summary>点击查看 代码改进 案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 优化前</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 优化后</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_1-前置知识" tabindex="-1"><a class="header-anchor" href="#_1-前置知识"><span>1. 前置知识</span></a></h3><ul><li><ol><li>for 循环的 <strong>初始化语句</strong> 只执行一次</li></ol></li><li><ol start="2"><li>避免重复进行 <strong>引用类型的属性访问</strong></li></ol></li></ul><h3 id="_2-本次代码优化思想" tabindex="-1"><a class="header-anchor" href="#_2-本次代码优化思想"><span>2. 本次代码优化思想</span></a></h3><ul><li>优化前，我们在循环过程中多次执行 <strong>判断条件</strong>，也就意味着多次访问了 <strong>引用类型的 length 属性</strong></li><li>优化后，我们在进入循环时，把 length 属性放在 <strong>初始化语句</strong> 中，只执行一次，也就避免了多次访问 length 属性</li></ul><h3 id="_3-思考" tabindex="-1"><a class="header-anchor" href="#_3-思考"><span>3. 思考</span></a></h3><ul><li>除了遍历数组这种场景，假如在某些循环中，若某个引用类型的属性会被多次访问，可以考虑用一个 <strong>临时变量</strong> 来存储 <strong>这个数据</strong></li></ul><h2 id="_2-提炼函数" tabindex="-1"><a class="header-anchor" href="#_2-提炼函数"><span>2. 提炼函数</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><p>某段代码被单独挑出来，封装成一段可复用的逻辑函数，称之为提炼函数</p></div><ul><li>确保一个函数只做一件事 <ul><li>如果某段逻辑被重复使用了，就应该封装成一个函数</li><li>如果要把一组数据处理成另一种格式，应该把处理逻辑封装成一个函数</li></ul></li><li>确保各个函数间耦合度低 <ul><li>函数的入参与出参要设计好</li></ul></li></ul><h2 id="_3-用管道法代替复杂循环" tabindex="-1"><a class="header-anchor" href="#_3-用管道法代替复杂循环"><span>3. 用管道法代替复杂循环</span></a></h2><div class="custom-container tip"><p class="custom-container-title">说明</p><ul><li>像数组的 map(), filter(), every() 这些方法本身就是返回的数组，因此，可以进行链式调用，这种方式也称 <strong>管道法</strong></li><li>程序是写给人看的，优先处理可读性</li><li>循环体内部处理逻辑减少了，即使循环次数变多，也不会消耗多大性能</li></ul></div><ul><li>以下代码做了 3 件事 <ul><li><ol><li>找出大于 5 的数</li></ol></li><li><ol start="2"><li>去重</li></ol></li><li><ol start="3"><li>把数组元素变为字符串类型</li></ol></li></ul></li></ul><details class="custom-container details"><summary>点击查看 代码改进 案例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 优化前（逻辑较乱，读起来费劲）</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> item
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
newArr <span class="token operator">=</span> newArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [ &#39;6&#39;, &#39;8&#39;, &#39;10&#39; ]</span>

<span class="token comment">// 2. 优化后（逻辑清晰，一步只做一件事）</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [ &#39;6&#39;, &#39;8&#39;, &#39;10&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,18),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","restructure.html.vue"]]),k=JSON.parse('{"path":"/frontend/javascript/restructure.html","title":"JavaScript 重构小技巧","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 减少重复访问引用类型的属性次数","slug":"_1-减少重复访问引用类型的属性次数","link":"#_1-减少重复访问引用类型的属性次数","children":[{"level":3,"title":"1. 前置知识","slug":"_1-前置知识","link":"#_1-前置知识","children":[]},{"level":3,"title":"2. 本次代码优化思想","slug":"_2-本次代码优化思想","link":"#_2-本次代码优化思想","children":[]},{"level":3,"title":"3. 思考","slug":"_3-思考","link":"#_3-思考","children":[]}]},{"level":2,"title":"2. 提炼函数","slug":"_2-提炼函数","link":"#_2-提炼函数","children":[]},{"level":2,"title":"3. 用管道法代替复杂循环","slug":"_3-用管道法代替复杂循环","link":"#_3-用管道法代替复杂循环","children":[]}],"git":{"updatedTime":1658804855000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":3}]},"filePathRelative":"frontend/javascript/restructure.md"}');export{r as comp,k as data};
