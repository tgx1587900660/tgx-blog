import{_ as i,r as p,o as c,c as r,d as a,w as t,e as o,a as s,b as n}from"./app-CkeFUswH.js";const u="/tgx-blog/assets/husky-pre-commit-wOC1fFMn.png",d="/tgx-blog/assets/test-pre-commit-DOCmYnyH.png",k={},v=o(`<h1 id="用-husky-阻住不合格的-code-提交" tabindex="-1"><a class="header-anchor" href="#用-husky-阻住不合格的-code-提交"><span>用 husky 阻住不合格的 code 提交</span></a></h1><div class="custom-container tip"><p class="custom-container-title">问题说明</p><ul><li>需求说明：git commit 提交时，利用 eslint 检测代码。如果不合格，终止这次 commit 提交。</li><li>实现方案：利用 husky + lint-staged + eslint 这 3 个插件包完成自动化操作。</li></ul></div><h2 id="_1-学习目标" tabindex="-1"><a class="header-anchor" href="#_1-学习目标"><span>1. 学习目标</span></a></h2><ul><li>读完这篇文章，你将知道： <ol><li>husky 有什么作用？</li><li>lint-staged 有什么作用？</li><li>eslint 有什么作用？</li><li>三者的触发顺序是怎么样的？</li><li>具体怎么样在项目中一步步实现？</li></ol></li></ul><h2 id="_2-这三个插件包的作用" tabindex="-1"><a class="header-anchor" href="#_2-这三个插件包的作用"><span>2. 这三个插件包的作用</span></a></h2><ul><li>husky: 用来注册 git 钩子，确保你运行 git 命令时，会 <strong>自动处理一些事情</strong>。例如： <ol><li>在运行 git commit 前我要在终端打印一条消息 &quot;pre-commit is running success!&quot;</li><li>在运行 git commit 前我要到 暂存区找到所有文件进行格式校验</li><li>在运行 git commit 前我要检测 你的 commit 消息是否合格</li></ol></li><li>lint-staged: 主要用来找到那些被 git add 到暂存区的文件</li><li>eslint: 主要用来扫描文件，检测代码格式并报错</li></ul><h2 id="_3-执行顺序" tabindex="-1"><a class="header-anchor" href="#_3-执行顺序"><span>3. 执行顺序</span></a></h2><div class="custom-container tip"><p class="custom-container-title">问题说明</p><ul><li>顺序：<strong>husky --&gt; lint-staged --&gt; eslint</strong></li><li>说明：先利<strong>用 husky</strong> 在你运行 git 命令时来<strong>触发某个动作</strong>。这个动作就是，利<strong>用 lint-staged</strong> 去<strong>找到暂存区的文件</strong>，然后利<strong>用 eslint</strong> <strong>检测</strong>暂存区文件中的<strong>代码是否符合规范</strong></li></ul></div><h2 id="_4-具体实现步骤" tabindex="-1"><a class="header-anchor" href="#_4-具体实现步骤"><span>4. 具体实现步骤</span></a></h2><ul><li>先来看下我的项目依赖以及环境</li></ul><div class="custom-container tip"><p class="custom-container-title">项目说明</p><ol><li>这是一个用 vuepress 2.x 搭建的静态文档博客项目</li><li>不需要一些诸如 webpack 之类的复杂 loader 配置，仅仅用来实现<strong>阻止不规范代码提交</strong></li><li>node 版本是 v16.16.0</li><li>npm 版本是 v8.11.0</li><li>yarn 版本是 v1.22.19 （我使用的 yarn 作为包管理工具）</li></ol></div><details class="custom-container details"><summary>点击查看 package.json</summary><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress-blog&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-first-blog&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;telectron&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vuepress/plugin-register-components&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vuepress/plugin-search&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vuepress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_4-1-安装使用-husky" tabindex="-1"><a class="header-anchor" href="#_4-1-安装使用-husky"><span>4.1 安装使用 husky</span></a></h3><ul><li>第一步：安装 husky 依赖包，终端运行以下命令：</li></ul><blockquote><p>请注意依赖包的版本，可以自行指定对应版本</p></blockquote>`,15),m=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"yarn"),n(),s("span",{class:"token function"},"add"),n(" husky "),s("span",{class:"token parameter variable"},"-D"),n(`
`)])])],-1),b=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"npm"),n(),s("span",{class:"token function"},"install"),n(" husky "),s("span",{class:"token parameter variable"},"-D"),n(`
`)])])],-1),g=o(`<ul><li>第二步：在 package.json 中添加两个脚本 <code>prepare</code> 和 <code>test-pre-commit</code>。做完这些后，package.json 如下：</li></ul><blockquote><p><code>prepare</code> 是为了生成 .husky 目录，<code>test-pre-commit</code> 是为了测试钩子是否成功触发。 其中，第 10 行 echo 是输出语句，这句话，相当于 console.log(&quot;\\&quot;pre-commit is running success!\\&quot;&quot;)</p></blockquote><details class="custom-container details"><summary>点击查看 package.json</summary><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress-blog&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-first-blog&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;test-pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;pre-commit is running success!\\&quot;&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;telectron&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vuepress/plugin-register-components&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vuepress/plugin-search&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vuepress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>第三步：终端运行以下命令，生成 .husky 文件夹：</li></ul><blockquote><p>以下 3 个命令之一被运行后，项目根目录(与 package.json 同级)会多出一个文件夹 .husky</p></blockquote>`,5),q=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token comment"},"# 3个命令任选其一"),n(`
`),s("span",{class:"token function"},"yarn"),n(` run prepare
`)])])],-1),h=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token comment"},"# 3个命令任选其一"),n(`
`),s("span",{class:"token function"},"npm"),n(` run prepare
`)])])],-1),y=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token comment"},"# 3个命令任选其一"),n(`
npx husky `),s("span",{class:"token function"},"install"),n(`
`)])])],-1),_=o(`<ul><li>第四步：创建钩子，终端运行以下命令：</li></ul><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 该命令的意思是：在 .husky 目录下创建一个文件 pre-commit，里面包含一条命令 npm test</span>
npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm test&quot;</span>
</code></pre></div><p>到此为止，.husky 文件夹和 pre-commit 文件内容就变成了下图：</p><img src="`+u+`" title="husky目录文件示意图" alt="husky目录文件示意图"><ul><li>第五步：手动定制 .husky/pre-commit 文件的内容，把 npm test 改成如下：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

<span class="token comment"># 执行 package.json 中的 test-pre-commit 命令</span>
<span class="token function">yarn</span> run test-pre-commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第六步：测试 pre-commit 钩子是否成功运行，终端运行以下命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> .husky/pre-commit
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Keep calm and commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下图： <img src="`+d+'"></p><p>到此为止，我们成功实现了在 commit 提交代码之前做某件事：<strong>打印出&quot;pre-commit is running success!&quot;</strong> 接下来，我们只需要把这件事换成：<strong>找到暂存区的文件，做代码检测，若合格就提交，不合格就取消提交</strong></p><h3 id="_4-2-安装使用-eslint" tabindex="-1"><a class="header-anchor" href="#_4-2-安装使用-eslint"><span>4.2 安装使用 eslint</span></a></h3><ul><li>第一步：安装 eslint 依赖包，终端运行以下命令：</li></ul><blockquote><p>请注意依赖包的版本，我这里是 &quot;eslint&quot;: &quot;^8.22.0&quot;</p></blockquote>',13),f=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"yarn"),n(),s("span",{class:"token function"},"add"),n(" eslint "),s("span",{class:"token parameter variable"},"-D"),n(`
`)])])],-1),j=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"npm"),n(),s("span",{class:"token function"},"install"),n(" eslint "),s("span",{class:"token parameter variable"},"-D"),n(`
`)])])],-1),x=o(`<ul><li>第二步：建立 eslint 的配置文件。方式有很多，我选择 <strong>在项目根目录下创建 .eslintrc.js 文件</strong>，如下：</li></ul><details class="custom-container details"><summary>点击查看 .eslintrc.js 文件内容</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js 内容</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es6</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 开启默认配置</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 自定义的规则</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">quotes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;single&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>到此为止，eslint 的配置就算完成了。接下来就让 lint-staged 来使用它。</p><h3 id="_4-3-安装使用-lint-staged" tabindex="-1"><a class="header-anchor" href="#_4-3-安装使用-lint-staged"><span>4.3 安装使用 lint-staged</span></a></h3><ul><li>第一步：安装 lint-staged 依赖包，终端运行以下命令：</li></ul><blockquote><p>请注意依赖包的版本，我这里是 &quot;lint-staged&quot;: &quot;^13.0.3&quot;</p></blockquote>`,6),N=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"yarn"),n(),s("span",{class:"token function"},"add"),n(" lint-staged "),s("span",{class:"token parameter variable"},"-D"),n(`
`)])])],-1),C=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"npm"),n(),s("span",{class:"token function"},"install"),n(" lint-staged "),s("span",{class:"token parameter variable"},"-D"),n(`
`)])])],-1),D=o(`<ul><li>第二步：在 package.json 中配置 lint-staged，如下：</li></ul><blockquote><p>我这个路径配置，只会校验那些 <strong>test 文件夹下，并且已经被添加到暂存区的 .js 和 .ts 文件</strong></p></blockquote><details class="custom-container details"><summary>点击查看 package.json 文件内容</summary><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress-blog&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;我的第一个博客&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;test-pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;pre-commit is running success!\\&quot;&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;telectron&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vuepress/plugin-register-components&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vuepress/plugin-search&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.22.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^13.0.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vuepress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-beta.49&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test/**/*.{js,ts}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>第三步：修改 .husky/pre-commit 的文件内容，如下：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

<span class="token comment"># 执行 package.json 中的 test-pre-commit 命令</span>
<span class="token comment"># yarn run test-pre-commit</span>

<span class="token comment"># 执行 package.json 中的 lint-staged 节点命令</span>
<span class="token function">yarn</span> run lint-staged

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，我们就完成了所有配置，接下来测试即可。</p><ul><li><p>第四步：测试 git commit 成功与否</p><ul><li><ol><li>确保与 package.json 平级的目录下创建了一个 test 文件夹</li></ol></li><li><ol start="2"><li>在 test 文件夹下创建一个 test-eslint.js 文件</li></ol></li><li><ol start="3"><li>写入不规范和规范的代码分别测试：</li></ol><details class="custom-container details"><summary>点击查看 test-eslint.js 文件内容</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 不规范的代码，会提交失败</span>
<span class="token comment">// const a = {</span>
<span class="token comment">//   0: &#39;asd&#39;,</span>
<span class="token comment">// }</span>
<span class="token comment">// let b = 2;</span>
<span class="token comment">// let c = 0</span>
<span class="token comment">// console.log(a);</span>
<span class="token comment">// console.log(b);</span>

<span class="token comment">// ----------------------------------------</span>

<span class="token comment">// 规范的代码，会提交成功</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;asd&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li><li><ol start="4"><li>终端运行命令：git add test/test-eslint.js</li></ol></li><li><ol start="5"><li>终端运行命令：git commit -m &quot;测试能否提交成功&quot;</li></ol></li><li><ol start="6"><li>可以看到终端分别会有失败和成功的结果</li></ol></li></ul></li></ul><p>到此为止，我们就实现了目标需求。</p>`,8);function w(P,S){const e=p("CodeGroupItem"),l=p("CodeGroup");return c(),r("div",null,[v,a(l,null,{default:t(()=>[a(e,{title:"YARN",active:""},{default:t(()=>[m]),_:1}),a(e,{title:"NPM"},{default:t(()=>[b]),_:1})]),_:1}),g,a(l,null,{default:t(()=>[a(e,{title:"YARN",active:""},{default:t(()=>[q]),_:1}),a(e,{title:"NPM"},{default:t(()=>[h]),_:1}),a(e,{title:"NPX"},{default:t(()=>[y]),_:1})]),_:1}),_,a(l,null,{default:t(()=>[a(e,{title:"YARN",active:""},{default:t(()=>[f]),_:1}),a(e,{title:"NPM"},{default:t(()=>[j]),_:1})]),_:1}),x,a(l,null,{default:t(()=>[a(e,{title:"YARN",active:""},{default:t(()=>[N]),_:1}),a(e,{title:"NPM"},{default:t(()=>[C]),_:1})]),_:1}),D])}const M=i(k,[["render",w],["__file","code-lint-usage.html.vue"]]),R=JSON.parse('{"path":"/frontend/source/article/code-lint-usage.html","title":"用 husky 阻住不合格的 code 提交","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 学习目标","slug":"_1-学习目标","link":"#_1-学习目标","children":[]},{"level":2,"title":"2. 这三个插件包的作用","slug":"_2-这三个插件包的作用","link":"#_2-这三个插件包的作用","children":[]},{"level":2,"title":"3. 执行顺序","slug":"_3-执行顺序","link":"#_3-执行顺序","children":[]},{"level":2,"title":"4. 具体实现步骤","slug":"_4-具体实现步骤","link":"#_4-具体实现步骤","children":[{"level":3,"title":"4.1 安装使用 husky","slug":"_4-1-安装使用-husky","link":"#_4-1-安装使用-husky","children":[]},{"level":3,"title":"4.2 安装使用 eslint","slug":"_4-2-安装使用-eslint","link":"#_4-2-安装使用-eslint","children":[]},{"level":3,"title":"4.3 安装使用 lint-staged","slug":"_4-3-安装使用-lint-staged","link":"#_4-3-安装使用-lint-staged","children":[]}]}],"git":{"updatedTime":1681876227000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":1}]},"filePathRelative":"frontend/source/article/code-lint-usage.md"}');export{M as comp,R as data};
