import{_ as s,o as n,c as a,e}from"./app-CkeFUswH.js";const l={},t=e(`<h1 id="sql-语言-相关知识" tabindex="-1"><a class="header-anchor" href="#sql-语言-相关知识"><span>SQL 语言 相关知识</span></a></h1><div class="custom-container tip"><p class="custom-container-title">栏目说明</p><p>本栏目收集了 <strong>SQL 编程语言</strong> 的相关知识</p></div><h2 id="_1-什么是-sql" tabindex="-1"><a class="header-anchor" href="#_1-什么是-sql"><span>1. 什么是 SQL？</span></a></h2><div class="custom-container tip"><p class="custom-container-title">概念</p><p>SQL（Structured Query Language）即 <strong>结构化查询语言</strong>，专门用来 <strong>访问和处理数据库</strong> 的编程语言。 能够让我们以编程的形式，操作数据库里面的数据。</p></div><ul><li>三个要点： <ul><li>SQL 是一门编程语言，用来操作数据库</li><li>使用 SQL 语言编写出来的代码，叫做 SQL 语句</li><li>SQL 语言只能在关系型数据库中使用（例如 MySQL、Oracle、SQL Server）。非关系型数据库（例如 Mongodb） 不支持 SQL 语言</li></ul></li></ul><h2 id="_2-sql-具体能做什么" tabindex="-1"><a class="header-anchor" href="#_2-sql-具体能做什么"><span>2. SQL 具体能做什么？</span></a></h2><div class="custom-container tip"><p class="custom-container-title">作用</p><ul><li>对数据库进行 <strong>增删改查</strong></li><li>创建 数据库</li><li>创建 数据库的表</li><li>可在数据库中创建存储过程、视图 等等</li></ul></div><h2 id="_3-sql-语法规则" tabindex="-1"><a class="header-anchor" href="#_3-sql-语法规则"><span>3. SQL 语法规则</span></a></h2><div class="custom-container tip"><p class="custom-container-title">重要</p><p>SQL 中的 <strong>关键字</strong> 对大小写不敏感</p></div><h3 id="_1-查询数据" tabindex="-1"><a class="header-anchor" href="#_1-查询数据"><span>1. 查询数据</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 SELECT</p><ul><li>SELECT 语句用于 <strong>从表中查询数据</strong>。执行的结果被存储在一个 <strong>结果表</strong> 中（称为结果集）</li></ul></div><details class="custom-container details"><summary>点击查看 SELECT 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 注释使用 &#39;--&#39; 格式</span>

<span class="token comment">-- 1. 从 指定的 表中 查询 所有列数据</span>
<span class="token comment">-- 语法：select * from 表名称</span>
<span class="token comment">-- 示例：从 users 这个表中查询 所有的列数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users

<span class="token comment">-- 2. 从 指定的 表中 查询 某一列数据</span>
<span class="token comment">-- 语法：select 列名称 from 表名称</span>
<span class="token comment">-- 示例：从 users 这个表中查询 username 这 1 列</span>
<span class="token keyword">select</span> username <span class="token keyword">from</span> users

<span class="token comment">-- 3. 从 指定的 表中 查询 多列数据</span>
<span class="token comment">-- 语法：select 列名称1, 列名称2 from 表名称（用英文逗号隔开）</span>
<span class="token comment">-- 示例：从 users 这个表中查询 uname, pwd 这 2 列</span>
<span class="token keyword">select</span> uname<span class="token punctuation">,</span> pwd <span class="token keyword">from</span> users
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_2-增加数据" tabindex="-1"><a class="header-anchor" href="#_2-增加数据"><span>2. 增加数据</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 INSERT INTO</p><ul><li>INSERT INTO 语句用于 <strong>从表中插入新数据行</strong>。</li></ul></div><details class="custom-container details"><summary>点击查看 INSERT INTO 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 向 指定表 中 增加 一条数据行</span>
<span class="token comment">-- 语法：insert into 表名 (列名1, 列名2) values (列值1, 列值2)</span>
<span class="token comment">-- 示例：向表 users 中 增加一行数据，其 username 是 &#39;tgx&#39;，password 是 &#39;2121236&#39;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;tgx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2121236&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_3-更新数据" tabindex="-1"><a class="header-anchor" href="#_3-更新数据"><span>3. 更新数据</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 UPDATE SET</p><ul><li>UPDATE SET 语句用于 <strong>从表中更新数据</strong>。</li><li>WHERE 语句用于 限定选择标准(例如 指定 id 号)</li><li><strong>一定要加 WHERE 语句，否则会更新整个表的数据！！</strong></li></ul></div><details class="custom-container details"><summary>点击查看 UPDATE SET 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 向 指定表 中 更新 某一行的 一列数据</span>
<span class="token comment">-- 语法: update 表名 set 列名1 = 新值 where 列名2 = 列值</span>
<span class="token comment">-- 示例：修改表 users 中 id 为 4 这条数据的 password 为 &#39;888&#39;</span>
<span class="token keyword">update</span> users <span class="token keyword">set</span> password<span class="token operator">=</span><span class="token string">&#39;888&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">4</span>

<span class="token comment">-- 2. 向 指定表 中 更新 某一行的 多列数据</span>
<span class="token comment">-- 语法: update 表名 set 列名1 = 新值, 列名2 = 新值 where 列名2 = 列值</span>
<span class="token comment">-- 示例：修改表 users 中 id为4 这条数据的 password为&#39;888&#39;, status为1</span>
<span class="token keyword">update</span> users <span class="token keyword">set</span> password<span class="token operator">=</span><span class="token string">&#39;920&#39;</span><span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">4</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_4-删除数据" tabindex="-1"><a class="header-anchor" href="#_4-删除数据"><span>4. 删除数据</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 DELETE</p><ul><li>DELETE 语句用于 <strong>从表中删除数据</strong>。</li><li>WHERE 语句用于 限定选择标准(例如 指定 id 号)</li><li><strong>一定要加 WHERE 语句，否则会删除整个表的数据！！</strong></li></ul></div><details class="custom-container details"><summary>点击查看 DELETE 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 向 指定表中 删除 某一行数据</span>
<span class="token comment">-- 语法: delete from 表名 where id=4</span>
<span class="token comment">-- 示例：删除 表users中 id为4 的这行数据</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> users <span class="token keyword">from</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">4</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_5-where-子句" tabindex="-1"><a class="header-anchor" href="#_5-where-子句"><span>5. WHERE 子句</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 WHERE</p><ul><li>WHERE 语句用于 限定选择标准，使得操作目标更加明确</li><li>WHERE 可以用在 SELECT（查）, UPDATE（改）, DELETE（删）中，限定条件</li></ul></div><ul><li>WHERE 的运算符（!= 的写法某些版本才支持）</li></ul><table><thead><tr><th>运算符</th><th style="text-align:center;">&gt;</th><th>&gt;=</th><th>&lt;</th><th>&lt;=</th><th>=</th><th>!= 或 &lt;&gt;</th><th>BETWEEN</th><th>LIKE</th></tr></thead><tbody><tr><td>描述</td><td style="text-align:center;">大于</td><td>大于等于</td><td>小于</td><td>小于等于</td><td>等于</td><td>不等于</td><td>在某个范围内</td><td>搜索某种模式</td></tr></tbody></table><details class="custom-container details"><summary>点击查看 WHERE 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 查询 status 为 1 的所有用户</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">1</span>

<span class="token comment">-- 2. 查询 id 大于 2 的所有用户</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">&gt;</span><span class="token number">2</span>

<span class="token comment">-- 3. 查询 id 不等于 2 的所有用户</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">&lt;&gt;</span><span class="token number">2</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_6-and-和-or-运算符" tabindex="-1"><a class="header-anchor" href="#_6-and-和-or-运算符"><span>6. AND 和 OR 运算符</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 AND 和 OR</p><ul><li>AND 和 OR 是用来修饰 WHERE 子句的条件运算符</li><li>AND 相当于 js 中的 &amp;&amp;</li><li>OR 相当于 js 中的 ||</li></ul></div><details class="custom-container details"><summary>点击查看 AND 和 OR 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 查询 status为1 并且 id小于3 的数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> id<span class="token operator">&lt;</span><span class="token number">3</span>

<span class="token comment">-- 2. 查询 status为1 或者 id等于3 的数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_7-order-by-子句" tabindex="-1"><a class="header-anchor" href="#_7-order-by-子句"><span>7. ORDER BY 子句</span></a></h3><div class="custom-container tip"><p class="custom-container-title">关键字 ORDER BY</p><ul><li>ORDER BY 是用来排序的。可以根据指定的列对结果集进行排序</li><li>ORDER BY <strong>默认使用升序规则</strong> 排序 <ul><li>ASC 是升序</li><li>DESC 是降序</li></ul></li></ul></div><details class="custom-container details"><summary>点击查看 ORDER BY 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 升序排列</span>
<span class="token comment">-- 示例：表根据 status 的值进行 升序排列</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">status</span>
或 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">status</span> <span class="token keyword">asc</span>

<span class="token comment">-- 2. 降序排列</span>
<span class="token comment">-- 示例：表根据 status 的值进行 降序排列</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">status</span> <span class="token keyword">desc</span>

<span class="token comment">-- 3. 多重排列</span>
<span class="token comment">-- 示例：表 先根据 status 的值进行 降序排列, 再根据 id 进行升序排列</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">status</span> <span class="token keyword">desc</span><span class="token punctuation">,</span> id <span class="token keyword">asc</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_8-count-函数-和-as-关键字" tabindex="-1"><a class="header-anchor" href="#_8-count-函数-和-as-关键字"><span>8. COUNT() 函数 和 AS 关键字</span></a></h3><div class="custom-container tip"><p class="custom-container-title">说明</p><ul><li>COUNT() 函数用于 <strong>获取查询数据的总条数</strong></li><li>AS 用来 <strong>起别名</strong></li></ul></div><details class="custom-container details"><summary>点击查看 COUNT 和 AS 具体用法</summary><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 1. count() 获取总条数</span>
<span class="token comment">-- 示例：获取 status为0 的总条数（此时字段名就是 count(*), 字段值就是数量）</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token comment">-- 2. as 给 count(*) 重命名</span>
<span class="token comment">-- 示例：获取 status为0 的总条数（此时字段名就是 total, 字段值就是数量）</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total <span class="token keyword">from</span> users <span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token comment">-- 3. as 给 username, password 重命名</span>
<span class="token comment">-- 示例：获取 username和password 列数据（此时字段名就是 uname和pwd）</span>
<span class="token keyword">select</span> username <span class="token keyword">as</span> uname<span class="token punctuation">,</span> password <span class="token keyword">as</span> pwd <span class="token keyword">from</span> users
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,35),i=[t];function o(r,c){return n(),a("div",null,i)}const p=s(l,[["render",o],["__file","sql.html.vue"]]),u=JSON.parse('{"path":"/backend/database/sql.html","title":"SQL 语言 相关知识","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 什么是 SQL？","slug":"_1-什么是-sql","link":"#_1-什么是-sql","children":[]},{"level":2,"title":"2. SQL 具体能做什么？","slug":"_2-sql-具体能做什么","link":"#_2-sql-具体能做什么","children":[]},{"level":2,"title":"3. SQL 语法规则","slug":"_3-sql-语法规则","link":"#_3-sql-语法规则","children":[{"level":3,"title":"1. 查询数据","slug":"_1-查询数据","link":"#_1-查询数据","children":[]},{"level":3,"title":"2. 增加数据","slug":"_2-增加数据","link":"#_2-增加数据","children":[]},{"level":3,"title":"3. 更新数据","slug":"_3-更新数据","link":"#_3-更新数据","children":[]},{"level":3,"title":"4. 删除数据","slug":"_4-删除数据","link":"#_4-删除数据","children":[]},{"level":3,"title":"5. WHERE 子句","slug":"_5-where-子句","link":"#_5-where-子句","children":[]},{"level":3,"title":"6. AND 和 OR 运算符","slug":"_6-and-和-or-运算符","link":"#_6-and-和-or-运算符","children":[]},{"level":3,"title":"7. ORDER BY 子句","slug":"_7-order-by-子句","link":"#_7-order-by-子句","children":[]},{"level":3,"title":"8. COUNT() 函数 和 AS 关键字","slug":"_8-count-函数-和-as-关键字","link":"#_8-count-函数-和-as-关键字","children":[]}]}],"git":{"updatedTime":1681896054000,"contributors":[{"name":"唐干宵","email":"1587900660@qq.com","commits":5}]},"filePathRelative":"backend/database/sql.md"}');export{p as comp,u as data};
