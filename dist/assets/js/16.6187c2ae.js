(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{464:function(t,s,_){"use strict";_.r(s);var v=_(56),l=Object(v.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"模块加载-相关知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模块加载-相关知识"}},[t._v("#")]),t._v(" 模块加载 相关知识")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("模块说明")]),t._v(" "),_("p",[t._v("在 node.js 中模块分为 3 种：内置模块、自定义模块、第三方模块。")])]),t._v(" "),_("h2",{attrs:{id:"_1-优先从缓存中加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-优先从缓存中加载"}},[t._v("#")]),t._v(" 1. 优先从缓存中加载")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("模块缓存机制")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("这 3 种模块在第一次加载后都会被缓存，从而提高加载效率")]),t._v("。这也意味着多次调用 require() 不会导致模块的代码被执行多次。")])])]),t._v(" "),_("h2",{attrs:{id:"_2-内置模块和第三方模块优先级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-内置模块和第三方模块优先级"}},[t._v("#")]),t._v(" 2. 内置模块和第三方模块优先级")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("模块优先级")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("内置模块优先级较高")]),t._v("。这也意味着内置模块与第三方模块同名时，加载的是内置模块")])])]),t._v(" "),_("h2",{attrs:{id:"_3-自定义模块的加载机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-自定义模块的加载机制"}},[t._v("#")]),t._v(" 3. 自定义模块的加载机制")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("加载顺序")]),t._v(" "),_("ul",[_("li",[t._v("加载自定义模块时需要指定路径")]),t._v(" "),_("li",[t._v("加载自定义模块时可以省略后缀名")]),t._v(" "),_("li",[t._v("例如：假设 demo 是个自定义模块，使用 require('./demo')，则查找顺序如下：\n"),_("ul",[_("li",[_("ol",[_("li",[t._v("加载 "),_("strong",[t._v("demo")]),t._v(" 文件内容，若没有")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("加载 "),_("strong",[t._v("demo.js")]),t._v(" 文件内容，若没有")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("加载 "),_("strong",[t._v("demo.json")]),t._v(" 文件内容，若没有")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"4"}},[_("li",[t._v("加载 "),_("strong",[t._v("demo.node")]),t._v(" 文件内容，若没有")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"5"}},[_("li",[t._v("加载失败，报错")])])])])])])]),t._v(" "),_("h2",{attrs:{id:"_4-第三方模块的加载机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-第三方模块的加载机制"}},[t._v("#")]),t._v(" 4. 第三方模块的加载机制")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("加载顺序")]),t._v(" "),_("ul",[_("li",[t._v("加载第三方模块时也有查找顺序")]),t._v(" "),_("li",[t._v("例如：假设 demo 是个第三方模块，使用 require('demo')，则查找顺序如下：\n"),_("ul",[_("li",[_("ol",[_("li",[t._v("加载 "),_("strong",[t._v("当前文件目录中 node_modules 下的 demo")]),t._v(" 文件内容")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("去 "),_("strong",[t._v("上一层文件目录中 node_modules 下的 demo")]),t._v(" 加载文件内容")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("继续去 "),_("strong",[t._v("上一层文件目录中 node_modules 下的 demo")]),t._v(" 加载文件内容")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"4"}},[_("li",[t._v("直到电脑磁盘根目录，加载失败就报错")])])])])])])]),t._v(" "),_("h2",{attrs:{id:"_5-使用目录作为导入标识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用目录作为导入标识"}},[t._v("#")]),t._v(" 5. 使用目录作为导入标识")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("加载说明")]),t._v(" "),_("ul",[_("li",[t._v("以目录为模块导入时，也有查找顺序 "),_("strong",[t._v("（目录一般也是自定义模块）")])]),t._v(" "),_("li",[t._v("例如：假设 demo 是个 "),_("strong",[t._v("文件目录名")]),t._v("，使用 require('demo')，则查找顺序如下：\n"),_("ul",[_("li",[_("ol",[_("li",[t._v("查看 demo 文件夹中 package.json 里的 main 属性，作为导入入口")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("若 demo 文件夹中不存在 package.json 或 没有 main 属性，则加载 demo/index.js")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("若都找不到，就会报错：Error: Cannot find module 'xxx'")])])])])])])]),t._v(" "),_("h2",{attrs:{id:"_6-package-json-属性节点说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-package-json-属性节点说明"}},[t._v("#")]),t._v(" 6. package.json 属性节点说明")]),t._v(" "),_("ul",[_("li",[t._v("type: 用来指定该项目的模块化规范。module 表示使用 ES6 模块化规范，commonjs 表示使用 commonjs 模块化规范")]),t._v(" "),_("li",[t._v("name: 表示该项目的名称。如果该项目被发布到 npm ，则该属性作为 包的名字")]),t._v(" "),_("li",[t._v("version: 表示该项目的版本号。会同步到 npm")]),t._v(" "),_("li",[t._v("description: 表示该项目的表述。会同步到 npm")]),t._v(" "),_("li",[t._v("main: 为该项目提供的入口文件。外界进行导入时，要导入的那个 js 文件路径")]),t._v(" "),_("li",[t._v("types/typings: 这两个节点效果一样。用来指定声明文件的入口，例如设置为 "),_("code",[t._v("./index.d.ts")]),t._v(" 则引入这个包就会具有 ts 的类型检测和代码提示功能(需要在 index.d.ts 中定义)")]),t._v(" "),_("li",[t._v("scripts: 收集脚本。可以用 npm run ... 来执行")]),t._v(" "),_("li",[t._v("keywords: 表示包关键字。会同步到 npm")]),t._v(" "),_("li",[t._v("auther: 指定包的作者。")]),t._v(" "),_("li",[t._v("license: 指定包的代码协议")])])])}),[],!1,null,null,null);s.default=l.exports}}]);