(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{468:function(t,s,_){"use strict";_.r(s);var i=_(56),v=Object(i.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"网站的-身份认证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网站的-身份认证"}},[t._v("#")]),t._v(" 网站的 身份认证")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("栏目说明")]),t._v(" "),_("p",[t._v("本栏目收集了一些有关 身份认证（Authentication）的内容。")])]),t._v(" "),_("h2",{attrs:{id:"_1-什么是-身份认证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-身份认证"}},[t._v("#")]),t._v(" 1. 什么是 身份认证？")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("概要")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("身份认证")]),t._v(" 又称 “"),_("strong",[t._v("身份验证")]),t._v("”、“"),_("strong",[t._v("鉴权")]),t._v("”，是指 "),_("strong",[t._v("通过一定的手段，完成对用户身份的确认")]),t._v("。")]),t._v(" "),_("li",[t._v("身份认证不止一种方案，根据 web 开发的模式，可以选择不同认证方案\n"),_("ul",[_("li",[_("strong",[t._v("服务端渲染")]),t._v(" 推荐使用 "),_("strong",[t._v("Session 认证机制")])]),t._v(" "),_("li",[_("strong",[t._v("前后端分离")]),t._v(" 推荐使用 "),_("strong",[t._v("JWT 认证机制")])])])])])]),t._v(" "),_("h2",{attrs:{id:"_2-session-认证机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-session-认证机制"}},[t._v("#")]),t._v(" 2. Session 认证机制")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("前置条件")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("http 协议无状态性")]),t._v(" 指的是客户端的每次 HTTP 请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次 HTTP 请求的状态。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("Cookie")]),t._v(" 是存储在用户浏览器中的一段 "),_("strong",[t._v("不超过 4 KB 的字符串")]),t._v("。它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。Cookie 具有以下特性：")]),t._v(" "),_("ul",[_("li",[t._v("自动发送")]),t._v(" "),_("li",[t._v("域名独立")]),t._v(" "),_("li",[t._v("过期时限")]),t._v(" "),_("li",[t._v("4KB 限制")])])])])]),t._v(" "),_("ul",[_("li",[t._v("Session 认证机制 的实质就是 Cookie + SessionId 双向认证\n"),_("ul",[_("li",[_("ol",[_("li",[t._v("第一次登录后，服务端验证 帐号 和 密码 成功")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("会给当前用户"),_("strong",[t._v("生成一个 SessionId 存在服务端")]),t._v("，"),_("strong",[t._v("同时生成一串 cookie 返回给客户端")])])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("同时生成的 SessionId 和 cookie 有着对应关系，不同用户有着不同的 SessionId 和 cookie")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"4"}},[_("li",[t._v("随后客户端存储 cookie "),_("strong",[t._v("（ Cookie 不能含用户信息 ）")])])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"5"}},[_("li",[t._v("后续每个客户端发送请求都会携带自己的 cookie")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"6"}},[_("li",[t._v("当服务端接收到请求后，首先拿着 cookie 信息找到对应的 SessionId，再返回对应的用户信息")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"7"}},[_("li",[t._v("只要处于登录状态，且 cookie 和 SessionId 配对成功，说明身份认证成功了")])])])])])]),t._v(" "),_("tgx-img",{attrs:{title:"Session 认证原理图",alt:"Session 认证原理图",src:"/browser/authentication/session-auth.png"}}),t._v(" "),_("p",[t._v("要在 express 项目中使用 Session 认证机制，请查看\n"),_("tgx-link",{attrs:{href:"/backend/tools/third-party-packages"}},[t._v("这篇文章")]),t._v("\n的 【express-session 中间件】 用法")],1),t._v(" "),_("h2",{attrs:{id:"_3-jwt-认证机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-jwt-认证机制"}},[t._v("#")]),t._v(" 3. JWT 认证机制")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),_("p",[t._v("JWT（即 JSON Web Token）是目前最流行的 "),_("strong",[t._v("跨域认证解决方案")]),t._v("。")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Session 认证机制 的局限性")]),t._v(" "),_("ul",[_("li",[t._v("Session 认证机制需要配合 Cookie 才能实现。")]),t._v(" "),_("li",[t._v("由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证。")])])]),t._v(" "),_("li",[_("p",[t._v("认证机制选型")]),t._v(" "),_("ul",[_("li",[t._v("当前端请求后端接口 "),_("strong",[t._v("不存在跨域问题")]),t._v(" 的时候，推荐使用 Session 身份认证机制。")]),t._v(" "),_("li",[t._v("当前端需要 "),_("strong",[t._v("跨域请求")]),t._v(" 后端接口的时候，推荐使用 JWT 认证机制。")])])])]),t._v(" "),_("h3",{attrs:{id:"_1-jwt-认证原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-jwt-认证原理"}},[t._v("#")]),t._v(" 1. JWT 认证原理")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("原理")]),t._v(" "),_("p",[t._v("用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份。")])]),t._v(" "),_("ul",[_("li",[t._v("具体实现步骤：\n"),_("ul",[_("li",[_("ol",[_("li",[t._v("浏览器使用 帐号、密码 登录")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("服务器确认帐号密码后，将 "),_("strong",[t._v("用户信息对象")]),t._v(" 加密成 Token 字符串")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("返回 加密后的 Token 字符串给客户端存储 "),_("strong",[t._v("（用户信息存在客户端）")])])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"4"}},[_("li",[t._v("后续客户端发送请求都会携带这个 请求头 Token 字符串")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"5"}},[_("li",[t._v("服务器就会拿到 这个 Token 字符串 进行解密，还原成 用户信息对象")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"6"}},[_("li",[t._v("解密验证成功后，才返回对应的响应内容")])])])])])]),t._v(" "),_("tgx-img",{attrs:{title:"JWT 认证原理图",alt:"JWT 认证原理图",src:"/browser/authentication/token-auth.png"}}),t._v(" "),_("h3",{attrs:{id:"_2-jwt-的-3-个组成部分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-jwt-的-3-个组成部分"}},[t._v("#")]),t._v(" 2. JWT 的 3 个组成部分")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),_("ul",[_("li",[t._v("JWT 一般由 Header（头部）、Payload（有效荷载）、Signature（签名）组成")]),t._v(" "),_("li",[t._v("具体组成格式：Header.Payload.Signature\n"),_("ul",[_("li",[t._v("例如： xxxxx.yyyyyy.zzzzzz")])])])])]),t._v(" "),_("ul",[_("li",[t._v("Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。")]),t._v(" "),_("li",[t._v("Header 和 Signature 是安全性相关的部分，只是为了保证 Token 的安全性。")])]),t._v(" "),_("p",[t._v("要在 express 项目中使用 JWT 认证机制，请查看\n"),_("tgx-link",{attrs:{href:"/backend/tools/third-party-packages"}},[t._v("这篇文章")]),t._v("\n的 【jsonwebtoken 和 express-jwt】 用法")],1)],1)}),[],!1,null,null,null);s.default=v.exports}}]);